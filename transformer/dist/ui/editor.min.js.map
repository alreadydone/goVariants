{"version":3,"sources":["ui/node_modules/browser-pack/_prelude.js","ui/node_modules/go-variants-engine/node_modules/lodash/_DataView.js","ui/node_modules/go-variants-engine/node_modules/lodash/_Hash.js","ui/node_modules/go-variants-engine/node_modules/lodash/_ListCache.js","ui/node_modules/go-variants-engine/node_modules/lodash/_Map.js","ui/node_modules/go-variants-engine/node_modules/lodash/_MapCache.js","ui/node_modules/go-variants-engine/node_modules/lodash/_Promise.js","ui/node_modules/go-variants-engine/node_modules/lodash/_Set.js","ui/node_modules/go-variants-engine/node_modules/lodash/_SetCache.js","ui/node_modules/go-variants-engine/node_modules/lodash/_Stack.js","ui/node_modules/go-variants-engine/node_modules/lodash/_Symbol.js","ui/node_modules/go-variants-engine/node_modules/lodash/_Uint8Array.js","ui/node_modules/go-variants-engine/node_modules/lodash/_WeakMap.js","ui/node_modules/go-variants-engine/node_modules/lodash/_addMapEntry.js","ui/node_modules/go-variants-engine/node_modules/lodash/_addSetEntry.js","ui/node_modules/go-variants-engine/node_modules/lodash/_arrayEach.js","ui/node_modules/go-variants-engine/node_modules/lodash/_arrayFilter.js","ui/node_modules/go-variants-engine/node_modules/lodash/_arrayLikeKeys.js","ui/node_modules/go-variants-engine/node_modules/lodash/_arrayMap.js","ui/node_modules/go-variants-engine/node_modules/lodash/_arrayPush.js","ui/node_modules/go-variants-engine/node_modules/lodash/_arrayReduce.js","ui/node_modules/go-variants-engine/node_modules/lodash/_arraySome.js","ui/node_modules/go-variants-engine/node_modules/lodash/_assignValue.js","ui/node_modules/go-variants-engine/node_modules/lodash/_assocIndexOf.js","ui/node_modules/go-variants-engine/node_modules/lodash/_baseAssign.js","ui/node_modules/go-variants-engine/node_modules/lodash/_baseAssignIn.js","ui/node_modules/go-variants-engine/node_modules/lodash/_baseAssignValue.js","ui/node_modules/go-variants-engine/node_modules/lodash/_baseClone.js","ui/node_modules/go-variants-engine/node_modules/lodash/_baseCreate.js","ui/node_modules/go-variants-engine/node_modules/lodash/_baseFindIndex.js","ui/node_modules/go-variants-engine/node_modules/lodash/_baseGet.js","ui/node_modules/go-variants-engine/node_modules/lodash/_baseGetAllKeys.js","ui/node_modules/go-variants-engine/node_modules/lodash/_baseGetTag.js","ui/node_modules/go-variants-engine/node_modules/lodash/_baseHasIn.js","ui/node_modules/go-variants-engine/node_modules/lodash/_baseIsArguments.js","ui/node_modules/go-variants-engine/node_modules/lodash/_baseIsEqual.js","ui/node_modules/go-variants-engine/node_modules/lodash/_baseIsEqualDeep.js","ui/node_modules/go-variants-engine/node_modules/lodash/_baseIsMatch.js","ui/node_modules/go-variants-engine/node_modules/lodash/_baseIsNative.js","ui/node_modules/go-variants-engine/node_modules/lodash/_baseIsTypedArray.js","ui/node_modules/go-variants-engine/node_modules/lodash/_baseIteratee.js","ui/node_modules/go-variants-engine/node_modules/lodash/_baseKeys.js","ui/node_modules/go-variants-engine/node_modules/lodash/_baseKeysIn.js","ui/node_modules/go-variants-engine/node_modules/lodash/_baseMatches.js","ui/node_modules/go-variants-engine/node_modules/lodash/_baseMatchesProperty.js","ui/node_modules/go-variants-engine/node_modules/lodash/_baseProperty.js","ui/node_modules/go-variants-engine/node_modules/lodash/_basePropertyDeep.js","ui/node_modules/go-variants-engine/node_modules/lodash/_baseTimes.js","ui/node_modules/go-variants-engine/node_modules/lodash/_baseToString.js","ui/node_modules/go-variants-engine/node_modules/lodash/_baseUnary.js","ui/node_modules/go-variants-engine/node_modules/lodash/_cacheHas.js","ui/node_modules/go-variants-engine/node_modules/lodash/_castPath.js","ui/node_modules/go-variants-engine/node_modules/lodash/_cloneArrayBuffer.js","ui/node_modules/go-variants-engine/node_modules/lodash/_cloneBuffer.js","ui/node_modules/go-variants-engine/node_modules/lodash/_cloneDataView.js","ui/node_modules/go-variants-engine/node_modules/lodash/_cloneMap.js","ui/node_modules/go-variants-engine/node_modules/lodash/_cloneRegExp.js","ui/node_modules/go-variants-engine/node_modules/lodash/_cloneSet.js","ui/node_modules/go-variants-engine/node_modules/lodash/_cloneSymbol.js","ui/node_modules/go-variants-engine/node_modules/lodash/_cloneTypedArray.js","ui/node_modules/go-variants-engine/node_modules/lodash/_copyArray.js","ui/node_modules/go-variants-engine/node_modules/lodash/_copyObject.js","ui/node_modules/go-variants-engine/node_modules/lodash/_copySymbols.js","ui/node_modules/go-variants-engine/node_modules/lodash/_copySymbolsIn.js","ui/node_modules/go-variants-engine/node_modules/lodash/_coreJsData.js","ui/node_modules/go-variants-engine/node_modules/lodash/_defineProperty.js","ui/node_modules/go-variants-engine/node_modules/lodash/_equalArrays.js","ui/node_modules/go-variants-engine/node_modules/lodash/_equalByTag.js","ui/node_modules/go-variants-engine/node_modules/lodash/_equalObjects.js","ui/node_modules/go-variants-engine/node_modules/lodash/_freeGlobal.js","ui/node_modules/go-variants-engine/node_modules/lodash/_getAllKeys.js","ui/node_modules/go-variants-engine/node_modules/lodash/_getAllKeysIn.js","ui/node_modules/go-variants-engine/node_modules/lodash/_getMapData.js","ui/node_modules/go-variants-engine/node_modules/lodash/_getMatchData.js","ui/node_modules/go-variants-engine/node_modules/lodash/_getNative.js","ui/node_modules/go-variants-engine/node_modules/lodash/_getPrototype.js","ui/node_modules/go-variants-engine/node_modules/lodash/_getRawTag.js","ui/node_modules/go-variants-engine/node_modules/lodash/_getSymbols.js","ui/node_modules/go-variants-engine/node_modules/lodash/_getSymbolsIn.js","ui/node_modules/go-variants-engine/node_modules/lodash/_getTag.js","ui/node_modules/go-variants-engine/node_modules/lodash/_getValue.js","ui/node_modules/go-variants-engine/node_modules/lodash/_hasPath.js","ui/node_modules/go-variants-engine/node_modules/lodash/_hashClear.js","ui/node_modules/go-variants-engine/node_modules/lodash/_hashDelete.js","ui/node_modules/go-variants-engine/node_modules/lodash/_hashGet.js","ui/node_modules/go-variants-engine/node_modules/lodash/_hashHas.js","ui/node_modules/go-variants-engine/node_modules/lodash/_hashSet.js","ui/node_modules/go-variants-engine/node_modules/lodash/_initCloneArray.js","ui/node_modules/go-variants-engine/node_modules/lodash/_initCloneByTag.js","ui/node_modules/go-variants-engine/node_modules/lodash/_initCloneObject.js","ui/node_modules/go-variants-engine/node_modules/lodash/_isIndex.js","ui/node_modules/go-variants-engine/node_modules/lodash/_isKey.js","ui/node_modules/go-variants-engine/node_modules/lodash/_isKeyable.js","ui/node_modules/go-variants-engine/node_modules/lodash/_isMasked.js","ui/node_modules/go-variants-engine/node_modules/lodash/_isPrototype.js","ui/node_modules/go-variants-engine/node_modules/lodash/_isStrictComparable.js","ui/node_modules/go-variants-engine/node_modules/lodash/_listCacheClear.js","ui/node_modules/go-variants-engine/node_modules/lodash/_listCacheDelete.js","ui/node_modules/go-variants-engine/node_modules/lodash/_listCacheGet.js","ui/node_modules/go-variants-engine/node_modules/lodash/_listCacheHas.js","ui/node_modules/go-variants-engine/node_modules/lodash/_listCacheSet.js","ui/node_modules/go-variants-engine/node_modules/lodash/_mapCacheClear.js","ui/node_modules/go-variants-engine/node_modules/lodash/_mapCacheDelete.js","ui/node_modules/go-variants-engine/node_modules/lodash/_mapCacheGet.js","ui/node_modules/go-variants-engine/node_modules/lodash/_mapCacheHas.js","ui/node_modules/go-variants-engine/node_modules/lodash/_mapCacheSet.js","ui/node_modules/go-variants-engine/node_modules/lodash/_mapToArray.js","ui/node_modules/go-variants-engine/node_modules/lodash/_matchesStrictComparable.js","ui/node_modules/go-variants-engine/node_modules/lodash/_memoizeCapped.js","ui/node_modules/go-variants-engine/node_modules/lodash/_nativeCreate.js","ui/node_modules/go-variants-engine/node_modules/lodash/_nativeKeys.js","ui/node_modules/go-variants-engine/node_modules/lodash/_nativeKeysIn.js","ui/node_modules/go-variants-engine/node_modules/lodash/_nodeUtil.js","ui/node_modules/go-variants-engine/node_modules/lodash/_objectToString.js","ui/node_modules/go-variants-engine/node_modules/lodash/_overArg.js","ui/node_modules/go-variants-engine/node_modules/lodash/_root.js","ui/node_modules/go-variants-engine/node_modules/lodash/_setCacheAdd.js","ui/node_modules/go-variants-engine/node_modules/lodash/_setCacheHas.js","ui/node_modules/go-variants-engine/node_modules/lodash/_setToArray.js","ui/node_modules/go-variants-engine/node_modules/lodash/_stackClear.js","ui/node_modules/go-variants-engine/node_modules/lodash/_stackDelete.js","ui/node_modules/go-variants-engine/node_modules/lodash/_stackGet.js","ui/node_modules/go-variants-engine/node_modules/lodash/_stackHas.js","ui/node_modules/go-variants-engine/node_modules/lodash/_stackSet.js","ui/node_modules/go-variants-engine/node_modules/lodash/_stringToPath.js","ui/node_modules/go-variants-engine/node_modules/lodash/_toKey.js","ui/node_modules/go-variants-engine/node_modules/lodash/_toSource.js","ui/node_modules/go-variants-engine/node_modules/lodash/clone.js","ui/node_modules/go-variants-engine/node_modules/lodash/eq.js","ui/node_modules/go-variants-engine/node_modules/lodash/findIndex.js","ui/node_modules/go-variants-engine/node_modules/lodash/get.js","ui/node_modules/go-variants-engine/node_modules/lodash/hasIn.js","ui/node_modules/go-variants-engine/node_modules/lodash/identity.js","ui/node_modules/go-variants-engine/node_modules/lodash/isArguments.js","ui/node_modules/go-variants-engine/node_modules/lodash/isArray.js","ui/node_modules/go-variants-engine/node_modules/lodash/isArrayLike.js","ui/node_modules/go-variants-engine/node_modules/lodash/isBuffer.js","ui/node_modules/go-variants-engine/node_modules/lodash/isFunction.js","ui/node_modules/go-variants-engine/node_modules/lodash/isLength.js","ui/node_modules/go-variants-engine/node_modules/lodash/isObject.js","ui/node_modules/go-variants-engine/node_modules/lodash/isObjectLike.js","ui/node_modules/go-variants-engine/node_modules/lodash/isSymbol.js","ui/node_modules/go-variants-engine/node_modules/lodash/isTypedArray.js","ui/node_modules/go-variants-engine/node_modules/lodash/keys.js","ui/node_modules/go-variants-engine/node_modules/lodash/keysIn.js","ui/node_modules/go-variants-engine/node_modules/lodash/memoize.js","ui/node_modules/go-variants-engine/node_modules/lodash/property.js","ui/node_modules/go-variants-engine/node_modules/lodash/stubArray.js","ui/node_modules/go-variants-engine/node_modules/lodash/stubFalse.js","ui/node_modules/go-variants-engine/node_modules/lodash/toFinite.js","ui/node_modules/go-variants-engine/node_modules/lodash/toInteger.js","ui/node_modules/go-variants-engine/node_modules/lodash/toNumber.js","ui/node_modules/go-variants-engine/node_modules/lodash/toString.js","ui/node_modules/go-variants-engine/src/engine.js","ui/node_modules/lodash/_arrayIncludes.js","ui/node_modules/lodash/_arrayIncludesWith.js","ui/node_modules/lodash/_baseFlatten.js","ui/node_modules/lodash/_baseIndexOf.js","ui/node_modules/lodash/_baseIsNaN.js","ui/node_modules/lodash/_baseUniq.js","ui/node_modules/lodash/_createSet.js","ui/node_modules/lodash/_freeGlobal.js","ui/node_modules/lodash/_isFlattenable.js","ui/node_modules/lodash/_strictIndexOf.js","ui/node_modules/lodash/flatten.js","ui/node_modules/lodash/noop.js","ui/node_modules/lodash/uniqBy.js","ui/node_modules/smartgame/index.js","ui/node_modules/smartgamer/index.js","ui/src/transformer.js","ui/ui/editor.js","ui/ui/editor.jsx"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzzJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClnjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChnhHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACzFA;AACA;AACA;AACA;AACA;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvhFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClhdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACxEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACjznVC;;;AAGD;;;;;;;;;;;;;;;;;;;;;;IAsBG;;;;;;;AAQH,SAAS,WAAT,CAAqB,OAArB,EACE;AACD;;AACA,KACC,WAAW,QAAQ,gBAAR,CADZ;AAAA,KAEG,UAAU,QAAQ,eAAR,CAFb;AAAA,KAGG,MAAM,QAAQ,kBAAR,CAHT;AAAA,KAIG,SAAS,SAAT,MAAS,CAAC,CAAD,EAAI,CAAJ;AAAA,SAAU,CAAC,IAAI,CAAJ,GAAQ,CAAT,IAAc,CAAxB;AAAA,EAJ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","file":"editor.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView');\n\nmodule.exports = DataView;\n","var hashClear = require('./_hashClear'),\n    hashDelete = require('./_hashDelete'),\n    hashGet = require('./_hashGet'),\n    hashHas = require('./_hashHas'),\n    hashSet = require('./_hashSet');\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\nmodule.exports = Hash;\n","var listCacheClear = require('./_listCacheClear'),\n    listCacheDelete = require('./_listCacheDelete'),\n    listCacheGet = require('./_listCacheGet'),\n    listCacheHas = require('./_listCacheHas'),\n    listCacheSet = require('./_listCacheSet');\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\nmodule.exports = ListCache;\n","var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map');\n\nmodule.exports = Map;\n","var mapCacheClear = require('./_mapCacheClear'),\n    mapCacheDelete = require('./_mapCacheDelete'),\n    mapCacheGet = require('./_mapCacheGet'),\n    mapCacheHas = require('./_mapCacheHas'),\n    mapCacheSet = require('./_mapCacheSet');\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\nmodule.exports = MapCache;\n","var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar Promise = getNative(root, 'Promise');\n\nmodule.exports = Promise;\n","var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar Set = getNative(root, 'Set');\n\nmodule.exports = Set;\n","var MapCache = require('./_MapCache'),\n    setCacheAdd = require('./_setCacheAdd'),\n    setCacheHas = require('./_setCacheHas');\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\nmodule.exports = SetCache;\n","var ListCache = require('./_ListCache'),\n    stackClear = require('./_stackClear'),\n    stackDelete = require('./_stackDelete'),\n    stackGet = require('./_stackGet'),\n    stackHas = require('./_stackHas'),\n    stackSet = require('./_stackSet');\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\nmodule.exports = Stack;\n","var root = require('./_root');\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n","var root = require('./_root');\n\n/** Built-in value references. */\nvar Uint8Array = root.Uint8Array;\n\nmodule.exports = Uint8Array;\n","var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar WeakMap = getNative(root, 'WeakMap');\n\nmodule.exports = WeakMap;\n","/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\nmodule.exports = addMapEntry;\n","/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\nmodule.exports = addSetEntry;\n","/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\nmodule.exports = arrayEach;\n","/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = arrayFilter;\n","var baseTimes = require('./_baseTimes'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isIndex = require('./_isIndex'),\n    isTypedArray = require('./isTypedArray');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = arrayLikeKeys;\n","/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\nmodule.exports = arrayMap;\n","/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\nmodule.exports = arrayPush;\n","/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\nmodule.exports = arrayReduce;\n","/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nmodule.exports = arraySome;\n","var baseAssignValue = require('./_baseAssignValue'),\n    eq = require('./eq');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\nmodule.exports = assignValue;\n","var eq = require('./eq');\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = assocIndexOf;\n","var copyObject = require('./_copyObject'),\n    keys = require('./keys');\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\nmodule.exports = baseAssign;\n","var copyObject = require('./_copyObject'),\n    keysIn = require('./keysIn');\n\n/**\n * The base implementation of `_.assignIn` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssignIn(object, source) {\n  return object && copyObject(source, keysIn(source), object);\n}\n\nmodule.exports = baseAssignIn;\n","var defineProperty = require('./_defineProperty');\n\n/**\n * The base implementation of `assignValue` and `assignMergeValue` without\n * value checks.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction baseAssignValue(object, key, value) {\n  if (key == '__proto__' && defineProperty) {\n    defineProperty(object, key, {\n      'configurable': true,\n      'enumerable': true,\n      'value': value,\n      'writable': true\n    });\n  } else {\n    object[key] = value;\n  }\n}\n\nmodule.exports = baseAssignValue;\n","var Stack = require('./_Stack'),\n    arrayEach = require('./_arrayEach'),\n    assignValue = require('./_assignValue'),\n    baseAssign = require('./_baseAssign'),\n    baseAssignIn = require('./_baseAssignIn'),\n    cloneBuffer = require('./_cloneBuffer'),\n    copyArray = require('./_copyArray'),\n    copySymbols = require('./_copySymbols'),\n    copySymbolsIn = require('./_copySymbolsIn'),\n    getAllKeys = require('./_getAllKeys'),\n    getAllKeysIn = require('./_getAllKeysIn'),\n    getTag = require('./_getTag'),\n    initCloneArray = require('./_initCloneArray'),\n    initCloneByTag = require('./_initCloneByTag'),\n    initCloneObject = require('./_initCloneObject'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isObject = require('./isObject'),\n    keys = require('./keys');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Deep clone\n *  2 - Flatten inherited properties\n *  4 - Clone symbols\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, bitmask, customizer, key, object, stack) {\n  var result,\n      isDeep = bitmask & CLONE_DEEP_FLAG,\n      isFlat = bitmask & CLONE_FLAT_FLAG,\n      isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      result = (isFlat || isFunc) ? {} : initCloneObject(value);\n      if (!isDeep) {\n        return isFlat\n          ? copySymbolsIn(value, baseAssignIn(result, value))\n          : copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  var keysFunc = isFull\n    ? (isFlat ? getAllKeysIn : getAllKeys)\n    : (isFlat ? keysIn : keys);\n\n  var props = isArr ? undefined : keysFunc(value);\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n  });\n  return result;\n}\n\nmodule.exports = baseClone;\n","var isObject = require('./isObject');\n\n/** Built-in value references. */\nvar objectCreate = Object.create;\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} proto The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nvar baseCreate = (function() {\n  function object() {}\n  return function(proto) {\n    if (!isObject(proto)) {\n      return {};\n    }\n    if (objectCreate) {\n      return objectCreate(proto);\n    }\n    object.prototype = proto;\n    var result = new object;\n    object.prototype = undefined;\n    return result;\n  };\n}());\n\nmodule.exports = baseCreate;\n","/**\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\n * support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {number} fromIndex The index to search from.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseFindIndex(array, predicate, fromIndex, fromRight) {\n  var length = array.length,\n      index = fromIndex + (fromRight ? 1 : -1);\n\n  while ((fromRight ? index-- : ++index < length)) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = baseFindIndex;\n","var castPath = require('./_castPath'),\n    toKey = require('./_toKey');\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = castPath(path, object);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\nmodule.exports = baseGet;\n","var arrayPush = require('./_arrayPush'),\n    isArray = require('./isArray');\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\nmodule.exports = baseGetAllKeys;\n","var Symbol = require('./_Symbol'),\n    getRawTag = require('./_getRawTag'),\n    objectToString = require('./_objectToString');\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n","/**\n * The base implementation of `_.hasIn` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHasIn(object, key) {\n  return object != null && key in Object(object);\n}\n\nmodule.exports = baseHasIn;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\nmodule.exports = baseIsArguments;\n","var baseIsEqualDeep = require('./_baseIsEqualDeep'),\n    isObjectLike = require('./isObjectLike');\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\nmodule.exports = baseIsEqual;\n","var Stack = require('./_Stack'),\n    equalArrays = require('./_equalArrays'),\n    equalByTag = require('./_equalByTag'),\n    equalObjects = require('./_equalObjects'),\n    getTag = require('./_getTag'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isTypedArray = require('./isTypedArray');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\nmodule.exports = baseIsEqualDeep;\n","var Stack = require('./_Stack'),\n    baseIsEqual = require('./_baseIsEqual');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * The base implementation of `_.isMatch` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to inspect.\n * @param {Object} source The object of property values to match.\n * @param {Array} matchData The property names, values, and compare flags to match.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n */\nfunction baseIsMatch(object, source, matchData, customizer) {\n  var index = matchData.length,\n      length = index,\n      noCustomizer = !customizer;\n\n  if (object == null) {\n    return !length;\n  }\n  object = Object(object);\n  while (index--) {\n    var data = matchData[index];\n    if ((noCustomizer && data[2])\n          ? data[1] !== object[data[0]]\n          : !(data[0] in object)\n        ) {\n      return false;\n    }\n  }\n  while (++index < length) {\n    data = matchData[index];\n    var key = data[0],\n        objValue = object[key],\n        srcValue = data[1];\n\n    if (noCustomizer && data[2]) {\n      if (objValue === undefined && !(key in object)) {\n        return false;\n      }\n    } else {\n      var stack = new Stack;\n      if (customizer) {\n        var result = customizer(objValue, srcValue, key, object, source, stack);\n      }\n      if (!(result === undefined\n            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\n            : result\n          )) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nmodule.exports = baseIsMatch;\n","var isFunction = require('./isFunction'),\n    isMasked = require('./_isMasked'),\n    isObject = require('./isObject'),\n    toSource = require('./_toSource');\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\nmodule.exports = baseIsNative;\n","var baseGetTag = require('./_baseGetTag'),\n    isLength = require('./isLength'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\nmodule.exports = baseIsTypedArray;\n","var baseMatches = require('./_baseMatches'),\n    baseMatchesProperty = require('./_baseMatchesProperty'),\n    identity = require('./identity'),\n    isArray = require('./isArray'),\n    property = require('./property');\n\n/**\n * The base implementation of `_.iteratee`.\n *\n * @private\n * @param {*} [value=_.identity] The value to convert to an iteratee.\n * @returns {Function} Returns the iteratee.\n */\nfunction baseIteratee(value) {\n  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n  if (typeof value == 'function') {\n    return value;\n  }\n  if (value == null) {\n    return identity;\n  }\n  if (typeof value == 'object') {\n    return isArray(value)\n      ? baseMatchesProperty(value[0], value[1])\n      : baseMatches(value);\n  }\n  return property(value);\n}\n\nmodule.exports = baseIteratee;\n","var isPrototype = require('./_isPrototype'),\n    nativeKeys = require('./_nativeKeys');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseKeys;\n","var isObject = require('./isObject'),\n    isPrototype = require('./_isPrototype'),\n    nativeKeysIn = require('./_nativeKeysIn');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeysIn(object) {\n  if (!isObject(object)) {\n    return nativeKeysIn(object);\n  }\n  var isProto = isPrototype(object),\n      result = [];\n\n  for (var key in object) {\n    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseKeysIn;\n","var baseIsMatch = require('./_baseIsMatch'),\n    getMatchData = require('./_getMatchData'),\n    matchesStrictComparable = require('./_matchesStrictComparable');\n\n/**\n * The base implementation of `_.matches` which doesn't clone `source`.\n *\n * @private\n * @param {Object} source The object of property values to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatches(source) {\n  var matchData = getMatchData(source);\n  if (matchData.length == 1 && matchData[0][2]) {\n    return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n  }\n  return function(object) {\n    return object === source || baseIsMatch(object, source, matchData);\n  };\n}\n\nmodule.exports = baseMatches;\n","var baseIsEqual = require('./_baseIsEqual'),\n    get = require('./get'),\n    hasIn = require('./hasIn'),\n    isKey = require('./_isKey'),\n    isStrictComparable = require('./_isStrictComparable'),\n    matchesStrictComparable = require('./_matchesStrictComparable'),\n    toKey = require('./_toKey');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatchesProperty(path, srcValue) {\n  if (isKey(path) && isStrictComparable(srcValue)) {\n    return matchesStrictComparable(toKey(path), srcValue);\n  }\n  return function(object) {\n    var objValue = get(object, path);\n    return (objValue === undefined && objValue === srcValue)\n      ? hasIn(object, path)\n      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n  };\n}\n\nmodule.exports = baseMatchesProperty;\n","/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\nmodule.exports = baseProperty;\n","var baseGet = require('./_baseGet');\n\n/**\n * A specialized version of `baseProperty` which supports deep paths.\n *\n * @private\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyDeep(path) {\n  return function(object) {\n    return baseGet(object, path);\n  };\n}\n\nmodule.exports = basePropertyDeep;\n","/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\nmodule.exports = baseTimes;\n","var Symbol = require('./_Symbol'),\n    arrayMap = require('./_arrayMap'),\n    isArray = require('./isArray'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = baseToString;\n","/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\nmodule.exports = baseUnary;\n","/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\nmodule.exports = cacheHas;\n","var isArray = require('./isArray'),\n    isKey = require('./_isKey'),\n    stringToPath = require('./_stringToPath'),\n    toString = require('./toString');\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {Object} [object] The object to query keys on.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value, object) {\n  if (isArray(value)) {\n    return value;\n  }\n  return isKey(value, object) ? [value] : stringToPath(toString(value));\n}\n\nmodule.exports = castPath;\n","var Uint8Array = require('./_Uint8Array');\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\nmodule.exports = cloneArrayBuffer;\n","var root = require('./_root');\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var length = buffer.length,\n      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n  buffer.copy(result);\n  return result;\n}\n\nmodule.exports = cloneBuffer;\n","var cloneArrayBuffer = require('./_cloneArrayBuffer');\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\nmodule.exports = cloneDataView;\n","var addMapEntry = require('./_addMapEntry'),\n    arrayReduce = require('./_arrayReduce'),\n    mapToArray = require('./_mapToArray');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1;\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), CLONE_DEEP_FLAG) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\nmodule.exports = cloneMap;\n","/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\nmodule.exports = cloneRegExp;\n","var addSetEntry = require('./_addSetEntry'),\n    arrayReduce = require('./_arrayReduce'),\n    setToArray = require('./_setToArray');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1;\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), CLONE_DEEP_FLAG) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\nmodule.exports = cloneSet;\n","var Symbol = require('./_Symbol');\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\nmodule.exports = cloneSymbol;\n","var cloneArrayBuffer = require('./_cloneArrayBuffer');\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\nmodule.exports = cloneTypedArray;\n","/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\nmodule.exports = copyArray;\n","var assignValue = require('./_assignValue'),\n    baseAssignValue = require('./_baseAssignValue');\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  var isNew = !object;\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    if (newValue === undefined) {\n      newValue = source[key];\n    }\n    if (isNew) {\n      baseAssignValue(object, key, newValue);\n    } else {\n      assignValue(object, key, newValue);\n    }\n  }\n  return object;\n}\n\nmodule.exports = copyObject;\n","var copyObject = require('./_copyObject'),\n    getSymbols = require('./_getSymbols');\n\n/**\n * Copies own symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\nmodule.exports = copySymbols;\n","var copyObject = require('./_copyObject'),\n    getSymbolsIn = require('./_getSymbolsIn');\n\n/**\n * Copies own and inherited symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbolsIn(source, object) {\n  return copyObject(source, getSymbolsIn(source), object);\n}\n\nmodule.exports = copySymbolsIn;\n","var root = require('./_root');\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\nmodule.exports = coreJsData;\n","var getNative = require('./_getNative');\n\nvar defineProperty = (function() {\n  try {\n    var func = getNative(Object, 'defineProperty');\n    func({}, '', {});\n    return func;\n  } catch (e) {}\n}());\n\nmodule.exports = defineProperty;\n","var SetCache = require('./_SetCache'),\n    arraySome = require('./_arraySome'),\n    cacheHas = require('./_cacheHas');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\nmodule.exports = equalArrays;\n","var Symbol = require('./_Symbol'),\n    Uint8Array = require('./_Uint8Array'),\n    eq = require('./eq'),\n    equalArrays = require('./_equalArrays'),\n    mapToArray = require('./_mapToArray'),\n    setToArray = require('./_setToArray');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]';\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\nmodule.exports = equalByTag;\n","var getAllKeys = require('./_getAllKeys');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\nmodule.exports = equalObjects;\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nmodule.exports = freeGlobal;\n","var baseGetAllKeys = require('./_baseGetAllKeys'),\n    getSymbols = require('./_getSymbols'),\n    keys = require('./keys');\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\nmodule.exports = getAllKeys;\n","var baseGetAllKeys = require('./_baseGetAllKeys'),\n    getSymbolsIn = require('./_getSymbolsIn'),\n    keysIn = require('./keysIn');\n\n/**\n * Creates an array of own and inherited enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeysIn(object) {\n  return baseGetAllKeys(object, keysIn, getSymbolsIn);\n}\n\nmodule.exports = getAllKeysIn;\n","var isKeyable = require('./_isKeyable');\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\nmodule.exports = getMapData;\n","var isStrictComparable = require('./_isStrictComparable'),\n    keys = require('./keys');\n\n/**\n * Gets the property names, values, and compare flags of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the match data of `object`.\n */\nfunction getMatchData(object) {\n  var result = keys(object),\n      length = result.length;\n\n  while (length--) {\n    var key = result[length],\n        value = object[key];\n\n    result[length] = [key, value, isStrictComparable(value)];\n  }\n  return result;\n}\n\nmodule.exports = getMatchData;\n","var baseIsNative = require('./_baseIsNative'),\n    getValue = require('./_getValue');\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\nmodule.exports = getNative;\n","var overArg = require('./_overArg');\n\n/** Built-in value references. */\nvar getPrototype = overArg(Object.getPrototypeOf, Object);\n\nmodule.exports = getPrototype;\n","var Symbol = require('./_Symbol');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n","var arrayFilter = require('./_arrayFilter'),\n    stubArray = require('./stubArray');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\nmodule.exports = getSymbols;\n","var arrayPush = require('./_arrayPush'),\n    getPrototype = require('./_getPrototype'),\n    getSymbols = require('./_getSymbols'),\n    stubArray = require('./stubArray');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\n\n/**\n * Creates an array of the own and inherited enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n  var result = [];\n  while (object) {\n    arrayPush(result, getSymbols(object));\n    object = getPrototype(object);\n  }\n  return result;\n};\n\nmodule.exports = getSymbolsIn;\n","var DataView = require('./_DataView'),\n    Map = require('./_Map'),\n    Promise = require('./_Promise'),\n    Set = require('./_Set'),\n    WeakMap = require('./_WeakMap'),\n    baseGetTag = require('./_baseGetTag'),\n    toSource = require('./_toSource');\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    setTag = '[object Set]',\n    weakMapTag = '[object WeakMap]';\n\nvar dataViewTag = '[object DataView]';\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\nmodule.exports = getTag;\n","/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\nmodule.exports = getValue;\n","var castPath = require('./_castPath'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray'),\n    isIndex = require('./_isIndex'),\n    isLength = require('./isLength'),\n    toKey = require('./_toKey');\n\n/**\n * Checks if `path` exists on `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @param {Function} hasFunc The function to check properties.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n */\nfunction hasPath(object, path, hasFunc) {\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      result = false;\n\n  while (++index < length) {\n    var key = toKey(path[index]);\n    if (!(result = object != null && hasFunc(object, key))) {\n      break;\n    }\n    object = object[key];\n  }\n  if (result || ++index != length) {\n    return result;\n  }\n  length = object == null ? 0 : object.length;\n  return !!length && isLength(length) && isIndex(key, length) &&\n    (isArray(object) || isArguments(object));\n}\n\nmodule.exports = hasPath;\n","var nativeCreate = require('./_nativeCreate');\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\nmodule.exports = hashClear;\n","/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nmodule.exports = hashDelete;\n","var nativeCreate = require('./_nativeCreate');\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\nmodule.exports = hashGet;\n","var nativeCreate = require('./_nativeCreate');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\nmodule.exports = hashHas;\n","var nativeCreate = require('./_nativeCreate');\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\nmodule.exports = hashSet;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\nmodule.exports = initCloneArray;\n","var cloneArrayBuffer = require('./_cloneArrayBuffer'),\n    cloneDataView = require('./_cloneDataView'),\n    cloneMap = require('./_cloneMap'),\n    cloneRegExp = require('./_cloneRegExp'),\n    cloneSet = require('./_cloneSet'),\n    cloneSymbol = require('./_cloneSymbol'),\n    cloneTypedArray = require('./_cloneTypedArray');\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\nmodule.exports = initCloneByTag;\n","var baseCreate = require('./_baseCreate'),\n    getPrototype = require('./_getPrototype'),\n    isPrototype = require('./_isPrototype');\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\nmodule.exports = initCloneObject;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\nmodule.exports = isIndex;\n","var isArray = require('./isArray'),\n    isSymbol = require('./isSymbol');\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/;\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\nmodule.exports = isKey;\n","/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\nmodule.exports = isKeyable;\n","var coreJsData = require('./_coreJsData');\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\nmodule.exports = isMasked;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\nmodule.exports = isPrototype;\n","var isObject = require('./isObject');\n\n/**\n * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` if suitable for strict\n *  equality comparisons, else `false`.\n */\nfunction isStrictComparable(value) {\n  return value === value && !isObject(value);\n}\n\nmodule.exports = isStrictComparable;\n","/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\nmodule.exports = listCacheClear;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\n\n/** Built-in value references. */\nvar splice = arrayProto.splice;\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\nmodule.exports = listCacheDelete;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\nmodule.exports = listCacheGet;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\nmodule.exports = listCacheHas;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\nmodule.exports = listCacheSet;\n","var Hash = require('./_Hash'),\n    ListCache = require('./_ListCache'),\n    Map = require('./_Map');\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\nmodule.exports = mapCacheClear;\n","var getMapData = require('./_getMapData');\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nmodule.exports = mapCacheDelete;\n","var getMapData = require('./_getMapData');\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\nmodule.exports = mapCacheGet;\n","var getMapData = require('./_getMapData');\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\nmodule.exports = mapCacheHas;\n","var getMapData = require('./_getMapData');\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\nmodule.exports = mapCacheSet;\n","/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\nmodule.exports = mapToArray;\n","/**\n * A specialized version of `matchesProperty` for source values suitable\n * for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction matchesStrictComparable(key, srcValue) {\n  return function(object) {\n    if (object == null) {\n      return false;\n    }\n    return object[key] === srcValue &&\n      (srcValue !== undefined || (key in Object(object)));\n  };\n}\n\nmodule.exports = matchesStrictComparable;\n","var memoize = require('./memoize');\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\nfunction memoizeCapped(func) {\n  var result = memoize(func, function(key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n    return key;\n  });\n\n  var cache = result.cache;\n  return result;\n}\n\nmodule.exports = memoizeCapped;\n","var getNative = require('./_getNative');\n\n/* Built-in method references that are verified to be native. */\nvar nativeCreate = getNative(Object, 'create');\n\nmodule.exports = nativeCreate;\n","var overArg = require('./_overArg');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\nmodule.exports = nativeKeys;\n","/**\n * This function is like\n * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * except that it includes inherited enumerable properties.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction nativeKeysIn(object) {\n  var result = [];\n  if (object != null) {\n    for (var key in Object(object)) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = nativeKeysIn;\n","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\nmodule.exports = nodeUtil;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n","/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\nmodule.exports = overArg;\n","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n","/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\nmodule.exports = setCacheAdd;\n","/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\nmodule.exports = setCacheHas;\n","/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\nmodule.exports = setToArray;\n","var ListCache = require('./_ListCache');\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\nmodule.exports = stackClear;\n","/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\nmodule.exports = stackDelete;\n","/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\nmodule.exports = stackGet;\n","/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\nmodule.exports = stackHas;\n","var ListCache = require('./_ListCache'),\n    Map = require('./_Map'),\n    MapCache = require('./_MapCache');\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\nmodule.exports = stackSet;\n","var memoizeCapped = require('./_memoizeCapped');\n\n/** Used to match property names within property paths. */\nvar reLeadingDot = /^\\./,\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoizeCapped(function(string) {\n  var result = [];\n  if (reLeadingDot.test(string)) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, string) {\n    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\nmodule.exports = stringToPath;\n","var isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = toKey;\n","/** Used for built-in method references. */\nvar funcProto = Function.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\nmodule.exports = toSource;\n","var baseClone = require('./_baseClone');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */\nfunction clone(value) {\n  return baseClone(value, CLONE_SYMBOLS_FLAG);\n}\n\nmodule.exports = clone;\n","/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\nmodule.exports = eq;\n","var baseFindIndex = require('./_baseFindIndex'),\n    baseIteratee = require('./_baseIteratee'),\n    toInteger = require('./toInteger');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * This method is like `_.find` except that it returns the index of the first\n * element `predicate` returns truthy for instead of the element itself.\n *\n * @static\n * @memberOf _\n * @since 1.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the found element, else `-1`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'active': false },\n *   { 'user': 'fred',    'active': false },\n *   { 'user': 'pebbles', 'active': true }\n * ];\n *\n * _.findIndex(users, function(o) { return o.user == 'barney'; });\n * // => 0\n *\n * // The `_.matches` iteratee shorthand.\n * _.findIndex(users, { 'user': 'fred', 'active': false });\n * // => 1\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.findIndex(users, ['active', false]);\n * // => 0\n *\n * // The `_.property` iteratee shorthand.\n * _.findIndex(users, 'active');\n * // => 2\n */\nfunction findIndex(array, predicate, fromIndex) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return -1;\n  }\n  var index = fromIndex == null ? 0 : toInteger(fromIndex);\n  if (index < 0) {\n    index = nativeMax(length + index, 0);\n  }\n  return baseFindIndex(array, baseIteratee(predicate, 3), index);\n}\n\nmodule.exports = findIndex;\n","var baseGet = require('./_baseGet');\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\nmodule.exports = get;\n","var baseHasIn = require('./_baseHasIn'),\n    hasPath = require('./_hasPath');\n\n/**\n * Checks if `path` is a direct or inherited property of `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.hasIn(object, 'a');\n * // => true\n *\n * _.hasIn(object, 'a.b');\n * // => true\n *\n * _.hasIn(object, ['a', 'b']);\n * // => true\n *\n * _.hasIn(object, 'b');\n * // => false\n */\nfunction hasIn(object, path) {\n  return object != null && hasPath(object, path, baseHasIn);\n}\n\nmodule.exports = hasIn;\n","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n","var baseIsArguments = require('./_baseIsArguments'),\n    isObjectLike = require('./isObjectLike');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\nmodule.exports = isArguments;\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n","var isFunction = require('./isFunction'),\n    isLength = require('./isLength');\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\nmodule.exports = isArrayLike;\n","var root = require('./_root'),\n    stubFalse = require('./stubFalse');\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\nmodule.exports = isBuffer;\n","var baseGetTag = require('./_baseGetTag'),\n    isObject = require('./isObject');\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nmodule.exports = isFunction;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nmodule.exports = isLength;\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nmodule.exports = isSymbol;\n","var baseIsTypedArray = require('./_baseIsTypedArray'),\n    baseUnary = require('./_baseUnary'),\n    nodeUtil = require('./_nodeUtil');\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\nmodule.exports = isTypedArray;\n","var arrayLikeKeys = require('./_arrayLikeKeys'),\n    baseKeys = require('./_baseKeys'),\n    isArrayLike = require('./isArrayLike');\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\nmodule.exports = keys;\n","var arrayLikeKeys = require('./_arrayLikeKeys'),\n    baseKeysIn = require('./_baseKeysIn'),\n    isArrayLike = require('./isArrayLike');\n\n/**\n * Creates an array of the own and inherited enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keysIn(new Foo);\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n */\nfunction keysIn(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n}\n\nmodule.exports = keysIn;\n","var MapCache = require('./_MapCache');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result) || cache;\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Expose `MapCache`.\nmemoize.Cache = MapCache;\n\nmodule.exports = memoize;\n","var baseProperty = require('./_baseProperty'),\n    basePropertyDeep = require('./_basePropertyDeep'),\n    isKey = require('./_isKey'),\n    toKey = require('./_toKey');\n\n/**\n * Creates a function that returns the value at `path` of a given object.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n * @example\n *\n * var objects = [\n *   { 'a': { 'b': 2 } },\n *   { 'a': { 'b': 1 } }\n * ];\n *\n * _.map(objects, _.property('a.b'));\n * // => [2, 1]\n *\n * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n * // => [1, 2]\n */\nfunction property(path) {\n  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n}\n\nmodule.exports = property;\n","/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\nmodule.exports = stubArray;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n","var toNumber = require('./toNumber');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_INTEGER = 1.7976931348623157e+308;\n\n/**\n * Converts `value` to a finite number.\n *\n * @static\n * @memberOf _\n * @since 4.12.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted number.\n * @example\n *\n * _.toFinite(3.2);\n * // => 3.2\n *\n * _.toFinite(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toFinite(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toFinite('3.2');\n * // => 3.2\n */\nfunction toFinite(value) {\n  if (!value) {\n    return value === 0 ? value : 0;\n  }\n  value = toNumber(value);\n  if (value === INFINITY || value === -INFINITY) {\n    var sign = (value < 0 ? -1 : 1);\n    return sign * MAX_INTEGER;\n  }\n  return value === value ? value : 0;\n}\n\nmodule.exports = toFinite;\n","var toFinite = require('./toFinite');\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\nmodule.exports = toInteger;\n","var isObject = require('./isObject'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = toNumber;\n","var baseToString = require('./_baseToString');\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\nmodule.exports = toString;\n","/* globals module: false, require: false */\r\nmodule.exports = function (options) {\r\n\t'use strict';\r\n\tlet _fi = require('lodash/findIndex')\r\n\t\t// , _iseq = require('lodash/isEqual')\r\n\t\t, _clone = require('lodash/clone')\r\n\t\t//utilities\r\n\t\t// const\r\n\r\n\t\t, _iseq = (x, y) => {\r\n\r\n\t\t\tif (!Array.isArray(x) || !Array.isArray(y)) {\r\n\t\t\t\treturn x == y// eslint-disable-line eqeqeq\r\n\t\t\t\t// return x === y\r\n\t\t\t}\r\n\t\t\tif (x.length !== y.length) return false\r\n\t\t\tfor (let index = 0; index < x.length; index++) {\r\n\t\t\t\tif (!_iseq(x[index], y[index])) {\r\n\t\t\t\t\treturn false\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true\r\n\r\n\t\t}\r\n\t\t, myIndexOf = (a, b) => {\r\n\t\t\treturn _fi(a, function (x) { return _iseq(x, b) });\r\n\t\t}\r\n\t// this version, without the _fi dependency, doesn't work!todo\r\n\t//  , myIndexOf = (array, item) => {\r\n\t// \t\tfor (let index = 0; index < array.length; index++) {\r\n\t// \t\t\tif (_iseq(array[index], item)) {\r\n\t// \t\t\t\treturn index;\r\n\r\n\t// \t\t\t}\r\n\t// \t\t\treturn -1;\r\n\t// \t\t}\r\n\r\n\t// \t}\r\n\r\n\t// \t, _clone = require('lodash/clone')\r\n\r\n\r\n\toptions = options || {}\r\n\t// boardMode = options.boardMode || 't'/*t:toroid; c:classic …*/\r\n\t// , boardDimensions = options.boardDimensions || [11, 11]/*move later*/\r\n\t// , rules = options.rules || {\r\n\t// suicide: true,\r\n\t// superko: false\r\n\t// }\r\n\tlet $ = {}\r\n\t////problem with the object spread operator and the build so using Object.assign instead.\r\n\t// $.rules = {\r\n\t// \t\tsuicide: true,\r\n\t// \t\t// superko: false /*⇒todo: enforce when true?*/,\r\n\t// \t\tkomi: 7.5,\r\n\t// \t\t... options.rules\r\n\t// \t}\r\n\t$.rules = Object.assign({}, {\r\n\t\tsuicide: true,\r\n\t\t// superko: false /*⇒todo: enforce when true?*/,\r\n\t\tkomi: 7.5,\r\n\t}, options.rules)\r\n\r\n\t// $.moves = options.moves || []\r\n\t$.options = options\r\n\toptions.boardDimensions = options.boardDimensions || [11, 11]\r\n\toptions.boardMode = options.boardMode || 't'/*t:toroid; c:classic …*/\r\n\t$.board = {}\r\n\t$.board.blackStones = options.blackStones || []\r\n\t$.board.whiteStones = options.whiteStones || []\r\n\r\n\t$.board.nextPlayer = options.nextPlayer || \"b\"\r\n\t$.board.captured = options.captured || [0, 0]\r\n\r\n\t$.exportData = function () {\r\n\t\treturn {\r\n\t\t\tblackStones: $.board.blackStones.map(_clone),\r\n\r\n\t\t\twhiteStones: $.board.whiteStones.map(_clone),\r\n\t\t\tcaptured: _clone($.board.captured),\r\n\t\t\tnextPlayer: $.board.nextPlayer\r\n\t\t}\r\n\t}\r\n\r\n\t$.loadData = function (data) {\r\n\t\t$.board.blackStones = data.blackStones\r\n\t\t$.board.whiteStones = data.whiteStones\r\n\t\t$.board.captured = data.captured\r\n\t\t$.board.nextPlayer = data.nextPlayer\r\n\t}\r\n\r\n\t//toroid\r\n\tif (options.boardMode === 't') $.board.getNeighbours =\r\n\t\tfunction (point) {\r\n\t\t\tlet result = []\r\n\t\t\tfor (let i = 0; i < 4; i++) {\r\n\t\t\t\tlet newPoint\r\n\t\t\t\tswitch (i) {\r\n\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\tnewPoint = [point[0] + 1, point[1]]\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tnewPoint = [point[0] - 1, point[1]]\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tnewPoint = [point[0], point[1] + 1]\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\tnewPoint = [point[0], point[1] - 1]\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t}\r\n\t\t\t\tresult.push([(newPoint[0] + options.boardDimensions[0]) % options.boardDimensions[0], (newPoint[1] + options.boardDimensions[1]) % options.boardDimensions[1]])\r\n\t\t\t}\r\n\t\t\treturn result\r\n\t\t}\r\n\tif (options.boardMode === 'c') $.board.getNeighbours =\r\n\t\tfunction (point) {\r\n\t\t\tlet result = []\r\n\t\t\tfor (let i = 0; i < 4; i++) {\r\n\t\t\t\tlet newPoint\r\n\t\t\t\tswitch (i) {\r\n\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\tnewPoint = [point[0] + 1, point[1]]\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tnewPoint = [point[0] - 1, point[1]]\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tnewPoint = [point[0], point[1] + 1]\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\tnewPoint = [point[0], point[1] - 1]\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t}\r\n\t\t\t\tif (newPoint[0] >= 0 && newPoint[0] < options.boardDimensions[0]\r\n\t\t\t\t\t&& newPoint[1] >= 0 && newPoint[1] < options.boardDimensions[1]\r\n\t\t\t\t)\r\n\t\t\t\t\tresult.push(newPoint)\r\n\t\t\t}\r\n\t\t\treturn result\r\n\t\t}\r\n\t//todo: klein, projective plane, …\r\n\r\n\t$.board.isEmpty = function (point) {\r\n\t\treturn myIndexOf($.board.blackStones, point) < 0\r\n\t\t\t&& myIndexOf($.board.whiteStones, point) < 0\r\n\t}\r\n\t$.board.getColour = function (point) {\r\n\t\tif (myIndexOf($.board.blackStones, point) >= 0) return 'b'\r\n\t\tif (myIndexOf($.board.whiteStones, point) >= 0) return 'w'\r\n\t\treturn 'e'\r\n\t}\r\n\t/**\r\n\t * Determines if a point is part of a chain with a liberty; if there are no liberties then it returns the chain of stones of the same colour that are connected to `startPoint`. Also used for counting to return connected components of same colour (black, white or empty).\r\n\t * @param {*} startPoint \r\n\t * @param {string|null} chainColour indicates the colour of the starting point.\r\n\t * @param {*} [stopColour='e'] stop working if the chain meets this colour\r\n\t * @param {Function} [getColour=$.board.getColour] Function used to determine the colour of a point.\r\n\t * @returns {bool|array} Returns `true` if the the component meets `stopColour`, and an array containing connected component of points linked to `startPoint` otherwise. \r\n\t */\t\r\n\tfunction chainHasLiberty (startPoint, chainColour, stopColour, getColour) {\r\n\t\tif (stopColour === undefined)\r\n\t\t\tstopColour = 'e'//by default, stop getting the chain when there is a liberty.\r\n\t\tif (getColour === undefined)\r\n\t\t\tgetColour = $.board.getColour//by default, use the usual board colour function\r\n\r\n\t\tif (chainColour === null)\r\n\t\t\tchainColour = getColour(startPoint)\r\n\t\tlet\r\n\t\t\tchain = [startPoint]\r\n\t\t\t, toExplore = []\r\n\t\t\t, point = startPoint //assumed to be of colour chainColour\r\n\r\n\t\twhile (point !== undefined) {\r\n\r\n\t\t\tlet neighbours = $.board.getNeighbours(point)\r\n\t\t\tfor (let i = 0; i < neighbours.length; i++) {\r\n\t\t\t\tlet newPoint = neighbours[i],\r\n\t\t\t\t\tnewColour = getColour(newPoint)\r\n\t\t\t\tif (newColour === stopColour) return true;\r\n\t\t\t\tif (newColour === chainColour) {\r\n\t\t\t\t\tif (myIndexOf(chain, newPoint) < 0) {\r\n\t\t\t\t\t\tchain.push(newPoint)\r\n\t\t\t\t\t\t// if (myIndexOf(toExplore, newPoint) < 0)\r\n\t\t\t\t\t\ttoExplore.push(newPoint)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tpoint = toExplore.pop()\r\n\t\t}\r\n\r\n\t\treturn chain;\r\n\t}\r\n\r\n\t$.board.chainHasLiberty = chainHasLiberty \r\n\r\n\t$.board.score = function (deadStones) {\r\n\t\t/*\r\n\t\tgo through the whole board \r\n\t\t*/\r\n\t\tif (deadStones === undefined) {\r\n\t\t\tdeadStones = []\r\n\t\t}\r\n\r\n\t\tlet result = {\r\n\t\t\tblackEmpty: []\r\n\t\t\t, whiteEmpty: []\r\n\t\t\t, dame: []\r\n\t\t\t, blackAlive: []\r\n\t\t\t, whiteAlive: []\r\n\t\t\t, blackDead: []\r\n\t\t\t, whiteDead: []\r\n\t\t\t, totalBlackCaptured: $.board.captured[0] //nb B stones removed by W during the game\r\n\t\t\t, totalWhiteCaptured: $.board.captured[1] //nb W stones removed by B during the game\r\n\t\t\t//todo:could replace by an class. data stored in a big array of pairs [point, status]\r\n\t\t}\r\n\r\n\t\tfor (let index = 0; index < deadStones.length; index++) {\r\n\t\t\tconst deadStone = deadStones[index];\r\n\t\t\tlet deadColour = $.board.getColour(deadStone)\r\n\t\t\tif (deadColour === 'e') throw new Error('invalid marked dead stone')\r\n\t\t\tlet\r\n\t\t\t\tdeadToFill = deadColour === 'b' ? result.blackDead : result.whiteDead\r\n\t\t\t\t, emptyToFill = deadColour === 'b' ? result.whiteEmpty : result.blackEmpty\r\n\t\t\t\t, aliveToFill = deadColour === 'b' ? result.whiteAlive : result.blackAlive\r\n\t\t\t\t, processPoint = (point, colour) => {\r\n\t\t\t\t\tif (colour === deadColour && myIndexOf(deadToFill, point) < 0) {\r\n\t\t\t\t\t\tdeadToFill.push(point)\r\n\t\t\t\t\t\temptyToFill.push(point)\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ((colour === deadColour || colour === 'e') && myIndexOf(emptyToFill, point) < 0) {\r\n\t\t\t\t\t\temptyToFill.push(point)\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (colour !== deadColour && colour !== 'e' && myIndexOf(aliveToFill, point) < 0) {\r\n\t\t\t\t\t\taliveToFill.push(point)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t, getColourForDeadComponent = (point) => {\r\n\t\t\t\t\tlet colour = $.board.getColour(point)\r\n\t\t\t\t\tprocessPoint(point, colour)\r\n\t\t\t\t\treturn colour === deadColour ? 'e' : colour\r\n\t\t\t\t}\r\n\t\t\tprocessPoint(deadStone, deadColour)\r\n\t\t\t$.board.chainHasLiberty(deadStone, 'e', '', getColourForDeadComponent)\r\n\t\t}\r\n\r\n\t\tfor (let i = 0,exitLoop = false; i < options.boardDimensions[0]; i++) {\r\n\t\t\tif (exitLoop) {\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t\tfor (let j = 0; j < options.boardDimensions[1]; j++) {\r\n\t\t\t\tif (result.blackEmpty.length\r\n\t\t\t\t\t+ result.whiteEmpty.length\r\n\t\t\t\t\t+ result.dame.length\r\n\t\t\t\t\t+ result.blackAlive.length\r\n\t\t\t\t\t+ result.whiteAlive.length\r\n\t\t\t\t\t// + result.blackDead.length\r\n\t\t\t\t\t// + result.whiteDead.length\r\n\t\t\t\t\t=== options.boardDimensions[0] * options.boardDimensions[1]\r\n\t\t\t\t) {\r\n\t\t\t\t\texitLoop = true\r\n\t\t\t\t\tbreak\r\n\t\t\t\t}\r\n\t\t\t\tconst point = [i, j], colour = $.board.getColour(point)\r\n\r\n\t\t\t\tif (colour === 'b'\r\n\t\t\t\t) {\r\n\t\t\t\t\tif (myIndexOf(result.blackAlive, point) < 0\r\n\t\t\t\t\t\t&& myIndexOf(result.blackDead, point) < 0) {\r\n\t\t\t\t\t\tresult.blackAlive.push(point)\r\n\t\t\t\t\t} else continue\r\n\t\t\t\t}\r\n\t\t\t\tif (colour === 'w') {\r\n\t\t\t\t\tif (myIndexOf(result.whiteAlive, point) < 0\r\n\t\t\t\t\t\t&& myIndexOf(result.whiteDead, point) < 0) {\r\n\t\t\t\t\t\tresult.whiteAlive.push(point)\r\n\t\t\t\t\t} else continue\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (colour === 'e') {\r\n\t\t\t\t\tif (myIndexOf(result.blackEmpty, point) >= 0\r\n\t\t\t\t\t\t|| myIndexOf(result.whiteEmpty, point) >= 0\r\n\t\t\t\t\t\t|| myIndexOf(result.dame, point) >= 0) {\r\n\t\t\t\t\t\tcontinue\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet\r\n\t\t\t\t\t\tmeetsBlack = false\r\n\t\t\t\t\t\t, meetsWhite = false\r\n\t\t\t\t\t\t, isBlackTerritory = false\r\n\t\t\t\t\t\t, isWhiteTerritory = false\r\n\t\t\t\t\t\t, getColourForScoring = (point) => {\r\n\r\n\t\t\t\t\t\t\tlet colour = $.board.getColour(point)\r\n\t\t\t\t\t\t\tswitch (colour) {\r\n\t\t\t\t\t\t\t\tcase 'b':\r\n\t\t\t\t\t\t\t\t\tif (myIndexOf(result.blackDead, point) >= 0) {\r\n\t\t\t\t\t\t\t\t\t\tcolour = 'e'\r\n\t\t\t\t\t\t\t\t\t\tisWhiteTerritory = true\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\tmeetsBlack = true\r\n\t\t\t\t\t\t\t\t\t\tif (myIndexOf(result.blackAlive, point) < 0) {\r\n\t\t\t\t\t\t\t\t\t\t\tresult.blackAlive.push(point)\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\tcase 'w':\r\n\t\t\t\t\t\t\t\t\tif (myIndexOf(result.whiteDead, point) >= 0) {\r\n\t\t\t\t\t\t\t\t\t\tcolour = 'e'\r\n\t\t\t\t\t\t\t\t\t\tisBlackTerritory = true\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\tmeetsWhite = true\r\n\t\t\t\t\t\t\t\t\t\tif (myIndexOf(result.whiteAlive, point) < 0) {\r\n\t\t\t\t\t\t\t\t\t\t\tresult.whiteAlive.push(point)\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\t\tdefault://nothing needed for 'e'\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn colour\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\tlet emptyComponent = $.board.chainHasLiberty(point, 'e', '', getColourForScoring)\r\n\t\t\t\t\tif (!meetsBlack && !meetsWhite) {\r\n\t\t\t\t\t\tthrow new Error('counting an empty board!')\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (isBlackTerritory && isWhiteTerritory) {\r\n\t\t\t\t\t\tthrow new Error('too many stones marked as dead')\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//could store the different empty components: V2 \r\n\t\t\t\t\tif (meetsBlack && meetsWhite) {\r\n\t\t\t\t\t\tresult.dame = result.dame.concat(emptyComponent)\r\n\t\t\t\t\t\tcontinue\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (meetsBlack) {\r\n\t\t\t\t\t\tresult.blackEmpty = result.blackEmpty.concat(emptyComponent)\r\n\t\t\t\t\t\tcontinue\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (meetsWhite) {\r\n\t\t\t\t\t\tresult.whiteEmpty = result.whiteEmpty.concat(emptyComponent)\r\n\t\t\t\t\t\tcontinue\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t//totals\r\n\t\tresult.totalBlackDead = result.blackDead.length\r\n\t\tresult.totalWhiteDead = result.whiteDead.length\r\n\t\tresult.totalBlackTerritory = result.blackEmpty.length\r\n\t\tresult.totalWhiteTerritory = result.whiteEmpty.length\r\n\r\n\r\n\t\t//todo: implement other rulesets. For now, just do territory + prisoners (Japanese style counting)\r\n\t\tresult.blackScore =\r\n\t\t\tresult.totalWhiteDead\r\n\t\t\t+ result.totalWhiteCaptured\r\n\t\t\t+ result.totalBlackTerritory\r\n\t\tresult.whiteScore =\r\n\t\t\tresult.totalBlackDead\r\n\t\t\t+ result.totalBlackCaptured\r\n\t\t\t+ result.totalWhiteTerritory\r\n\t\t\t+ $.rules.komi\r\n\t\tlet r = result.blackScore - result.whiteScore\r\n\t\tif (r === 0) result.RE = '0'\r\n\t\telse if (r > 0) result.RE = 'B+' + r\r\n\t\telse result.RE = 'W+' + (-r)\r\n\t\treturn result\r\n\t}\r\n\r\n\t$.board.empty = function () {\r\n\t\t$.board.whiteStones = []\r\n\t\t$.board.blackStones = []\r\n\t\t$.board.captured = [0, 0]\r\n\r\n\t}\r\n\r\n\t$.removeChain = function (chain, colour) {\r\n\t\tlet toRemoveFrom = colour === 'w' ? $.board.whiteStones : $.board.blackStones\r\n\t\tfor (let j = 0; j < chain.length; j++) {\r\n\t\t\tlet index = myIndexOf(toRemoveFrom, chain[j])\r\n\t\t\ttoRemoveFrom.splice(index, 1)\r\n\t\t\tif (colour === 'w') $.board.captured[1] = $.board.captured[1] + 1\r\n\t\t\telse $.board.captured[0] = $.board.captured[0] + 1\r\n\t\t}\r\n\t}\r\n\t$.play = function (playerColour, point) {\r\n\r\n\r\n\r\n\t\t// let result = \"ok\"\r\n\t\tif (!$.board.isEmpty(point))\r\n\t\t\tthrow new Error('point is not empty')\r\n\t\t// console.log('point is not empty' + point)\r\n\r\n\t\tif (playerColour === 'b') $.board.blackStones.push(point)\r\n\t\telse $.board.whiteStones.push(point)\r\n\r\n\t\tlet neighbours = $.board.getNeighbours(point)\r\n\t\t\t, removed = []//chains removed\r\n\r\n\t\tfor (let i = 0; i < neighbours.length; i++) {\r\n\t\t\tlet neighbour = neighbours[i], colour = $.board.getColour(neighbour)\r\n\t\t\tif (colour === playerColour || colour === 'e') continue\r\n\t\t\tlet oppColour = $.getOppositeColour(playerColour),\r\n\t\t\t\tr = $.board.chainHasLiberty(neighbour, oppColour)\r\n\t\t\tif (r === true) continue\r\n\t\t\t////remove - no liberties\r\n\t\t\tremoved[removed.length] = r\r\n\r\n\t\t\t$.removeChain(r, oppColour)\r\n\r\n\t\t\t// let chainToRemove = r[1],\r\n\t\t\t// toRemoveFrom = playerColour === 'b' ? $.board.whiteStones : $.board.blackStones\r\n\t\t\t// for (let j = 0; j<chainToRemove.length; j++)\r\n\t\t\t// {\r\n\t\t\t// let index = myIndexOf(toRemoveFrom,chainToRemove[j])\r\n\t\t\t// toRemoveFrom.splice(index, 1)\r\n\t\t\t// if (playerColour === 'b') $.board.captured[1] = $.board.captured[1] + 1\r\n\t\t\t// else $.board.captured[0] = $.board.captured[0] + 1\r\n\t\t\t// }\r\n\t\t\t// removed = true\r\n\t\t}\r\n\t\tlet suicide = false\r\n\t\tif (removed.length === 0) {\r\n\t\t\tlet s = $.board.chainHasLiberty(point, playerColour)\r\n\t\t\tif (s !== true) {\r\n\t\t\t\tif ($.rules.suicide) {\r\n\t\t\t\t\t$.removeChain(s, playerColour)\r\n\t\t\t\t\tsuicide = s\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthrow new Error('suicide')//isn’t allowed\r\n\t\t\t\t\t//todo: remove point from whiteStones or blackStones\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t\tstoring the situation in memory - would be useful when implementing going back a move, superko, …\r\n\t\t\tnot needed for now\r\n\t\t*/\r\n\t\t//$.moves.push([playerColour,point,_.clone($.board.whiteStones),_.clone($.board.blackStones)])\r\n\t\t// $.moves.push([playerColour,point])\r\n\r\n\t\t// getNeighbours[i] = [getNeighbours[i], $.board.getColour[getNeighbours[i]]\r\n\t\t// //…\r\n\r\n\r\n\t\treturn { removed, suicide }\r\n\t}\r\n\t$.getOppositeColour = function (colour) {\r\n\t\tswitch (colour) {\r\n\t\t\tcase 'b':\r\n\t\t\t\treturn 'w'\r\n\t\t\tcase 'w':\r\n\t\t\t\treturn 'b'\r\n\t\t}\r\n\t\treturn null\r\n\t}\r\n\treturn $\r\n\r\n}","var baseIndexOf = require('./_baseIndexOf');\n\n/**\n * A specialized version of `_.includes` for arrays without support for\n * specifying an index to search from.\n *\n * @private\n * @param {Array} [array] The array to inspect.\n * @param {*} target The value to search for.\n * @returns {boolean} Returns `true` if `target` is found, else `false`.\n */\nfunction arrayIncludes(array, value) {\n  var length = array == null ? 0 : array.length;\n  return !!length && baseIndexOf(array, value, 0) > -1;\n}\n\nmodule.exports = arrayIncludes;\n","/**\n * This function is like `arrayIncludes` except that it accepts a comparator.\n *\n * @private\n * @param {Array} [array] The array to inspect.\n * @param {*} target The value to search for.\n * @param {Function} comparator The comparator invoked per element.\n * @returns {boolean} Returns `true` if `target` is found, else `false`.\n */\nfunction arrayIncludesWith(array, value, comparator) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (comparator(value, array[index])) {\n      return true;\n    }\n  }\n  return false;\n}\n\nmodule.exports = arrayIncludesWith;\n","var arrayPush = require('./_arrayPush'),\n    isFlattenable = require('./_isFlattenable');\n\n/**\n * The base implementation of `_.flatten` with support for restricting flattening.\n *\n * @private\n * @param {Array} array The array to flatten.\n * @param {number} depth The maximum recursion depth.\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n * @param {Array} [result=[]] The initial result value.\n * @returns {Array} Returns the new flattened array.\n */\nfunction baseFlatten(array, depth, predicate, isStrict, result) {\n  var index = -1,\n      length = array.length;\n\n  predicate || (predicate = isFlattenable);\n  result || (result = []);\n\n  while (++index < length) {\n    var value = array[index];\n    if (depth > 0 && predicate(value)) {\n      if (depth > 1) {\n        // Recursively flatten arrays (susceptible to call stack limits).\n        baseFlatten(value, depth - 1, predicate, isStrict, result);\n      } else {\n        arrayPush(result, value);\n      }\n    } else if (!isStrict) {\n      result[result.length] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseFlatten;\n","var baseFindIndex = require('./_baseFindIndex'),\n    baseIsNaN = require('./_baseIsNaN'),\n    strictIndexOf = require('./_strictIndexOf');\n\n/**\n * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseIndexOf(array, value, fromIndex) {\n  return value === value\n    ? strictIndexOf(array, value, fromIndex)\n    : baseFindIndex(array, baseIsNaN, fromIndex);\n}\n\nmodule.exports = baseIndexOf;\n","/**\n * The base implementation of `_.isNaN` without support for number objects.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n */\nfunction baseIsNaN(value) {\n  return value !== value;\n}\n\nmodule.exports = baseIsNaN;\n","var SetCache = require('./_SetCache'),\n    arrayIncludes = require('./_arrayIncludes'),\n    arrayIncludesWith = require('./_arrayIncludesWith'),\n    cacheHas = require('./_cacheHas'),\n    createSet = require('./_createSet'),\n    setToArray = require('./_setToArray');\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n */\nfunction baseUniq(array, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      length = array.length,\n      isCommon = true,\n      result = [],\n      seen = result;\n\n  if (comparator) {\n    isCommon = false;\n    includes = arrayIncludesWith;\n  }\n  else if (length >= LARGE_ARRAY_SIZE) {\n    var set = iteratee ? null : createSet(array);\n    if (set) {\n      return setToArray(set);\n    }\n    isCommon = false;\n    includes = cacheHas;\n    seen = new SetCache;\n  }\n  else {\n    seen = iteratee ? [] : result;\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index],\n        computed = iteratee ? iteratee(value) : value;\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (isCommon && computed === computed) {\n      var seenIndex = seen.length;\n      while (seenIndex--) {\n        if (seen[seenIndex] === computed) {\n          continue outer;\n        }\n      }\n      if (iteratee) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n    else if (!includes(seen, computed, comparator)) {\n      if (seen !== result) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseUniq;\n","var Set = require('./_Set'),\n    noop = require('./noop'),\n    setToArray = require('./_setToArray');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/**\n * Creates a set object of `values`.\n *\n * @private\n * @param {Array} values The values to add to the set.\n * @returns {Object} Returns the new set.\n */\nvar createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {\n  return new Set(values);\n};\n\nmodule.exports = createSet;\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nmodule.exports = freeGlobal;\n","var Symbol = require('./_Symbol'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray');\n\n/** Built-in value references. */\nvar spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;\n\n/**\n * Checks if `value` is a flattenable `arguments` object or array.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n */\nfunction isFlattenable(value) {\n  return isArray(value) || isArguments(value) ||\n    !!(spreadableSymbol && value && value[spreadableSymbol]);\n}\n\nmodule.exports = isFlattenable;\n","/**\n * A specialized version of `_.indexOf` which performs strict equality\n * comparisons of values, i.e. `===`.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction strictIndexOf(array, value, fromIndex) {\n  var index = fromIndex - 1,\n      length = array.length;\n\n  while (++index < length) {\n    if (array[index] === value) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = strictIndexOf;\n","var baseFlatten = require('./_baseFlatten');\n\n/**\n * Flattens `array` a single level deep.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to flatten.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * _.flatten([1, [2, [3, [4]], 5]]);\n * // => [1, 2, [3, [4]], 5]\n */\nfunction flatten(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? baseFlatten(array, 1) : [];\n}\n\nmodule.exports = flatten;\n","/**\n * This method returns `undefined`.\n *\n * @static\n * @memberOf _\n * @since 2.3.0\n * @category Util\n * @example\n *\n * _.times(2, _.noop);\n * // => [undefined, undefined]\n */\nfunction noop() {\n  // No operation performed.\n}\n\nmodule.exports = noop;\n","var baseIteratee = require('./_baseIteratee'),\n    baseUniq = require('./_baseUniq');\n\n/**\n * This method is like `_.uniq` except that it accepts `iteratee` which is\n * invoked for each element in `array` to generate the criterion by which\n * uniqueness is computed. The order of result values is determined by the\n * order they occur in the array. The iteratee is invoked with one argument:\n * (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\n * // => [2.1, 1.2]\n *\n * // The `_.property` iteratee shorthand.\n * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n * // => [{ 'x': 1 }, { 'x': 2 }]\n */\nfunction uniqBy(array, iteratee) {\n  return (array && array.length) ? baseUniq(array, baseIteratee(iteratee, 2)) : [];\n}\n\nmodule.exports = uniqBy;\n","/**\n * Convert SGF files to a JS object\n * @param {string} sgf A valid SGF file.\n * @see http://www.red-bean.com/sgf/sgf4.html\n * @return {object} The SGF file represented as a JS object\n */\nexports.parse = function (sgf) {\n\t'use strict';\n\n\tvar parse;\n\tvar parser;\n\tvar collection = {};\n\n\t// tracks the current sequence\n\tvar sequence;\n\n\t// tracks the current node\n\tvar node;\n\n\t// tracks the last PropIdent\n\tvar lastPropIdent;\n\n\t// A map of functions to parse the different components of an SGF file\n\tparser = {\n\n\t\tbeginSequence: function (sgf) {\n\t\t\tvar key = 'sequences';\n\n\t\t\t// Top-level sequences are gameTrees\n\t\t\tif (!sequence) {\n\t\t\t\tsequence = collection;\n\t\t\t\tkey = 'gameTrees';\n\t\t\t}\n\n\t\t\tif (sequence.gameTrees) {\n\t\t\t\tkey = 'gameTrees';\n\t\t\t}\n\n\t\t\tvar newSequence = {\n\t\t\t\tparent: sequence\n\t\t\t};\n\n\t\t\tsequence[key] = sequence[key] || [];\n\t\t\tsequence[key].push(newSequence);\n\t\t\tsequence = newSequence;\n\n\t\t\treturn sgf.substring(1);\n\t\t},\n\n\t\tendSequence: function (sgf) {\n\t\t\tif (sequence.parent) {\n\t\t\t\tsequence = sequence.parent;\n\t\t\t} else {\n\t\t\t\tsequence = null;\n\t\t\t}\n\t\t\treturn sgf.substring(1);\n\t\t},\n\n\t\tnode: function (sgf) {\n\t\t\tnode = {};\n\t\t\tsequence.nodes = sequence.nodes || [];\n\t\t\tsequence.nodes.push(node);\n\t\t\treturn sgf.substring(1);\n\t\t},\n\n\t\tproperty: function (sgf) {\n\t\t\tvar propValue;\n\n\t\t\t// Search for the first unescaped ]\n\t\t\tvar firstPropEnd = sgf.match(/([^\\\\\\]]|\\\\(.|\\n|\\r))*\\]/);\n\n\t\t\tif (!firstPropEnd.length) {\n\t\t\t\tthrow new Error('malformed sgf');\n\t\t\t}\n\n\t\t\tfirstPropEnd = firstPropEnd[0].length;\n\n\t\t\tvar property = sgf.substring(0, firstPropEnd);\n\t\t\tvar propValueBegin = property.indexOf('[');\n\t\t\tvar propIdent = property.substring(0, propValueBegin);\n\n\t\t\t// Point lists don't declare a PropIdent for each PropValue\n\t\t\t// Instead, they should use the last declared property\n\t\t\t// See: http://www.red-bean.com/sgf/sgf4.html#move/pos\n\t\t\tif (!propIdent) {\n\t\t\t\tpropIdent = lastPropIdent;\n\n\t\t\t\t// If this is the first property in a list of multiple\n\t\t\t\t// properties, we need to wrap the PropValue in an array\n\t\t\t\tif (!Array.isArray(node[propIdent])) {\n\t\t\t\t\tnode[propIdent] = [node[propIdent]];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlastPropIdent = propIdent;\n\n\t\t\tpropValue = property.substring(propValueBegin + 1, property.length - 1);\n\n\t\t\t// We have no problem parsing PropIdents of any length, but the spec\n\t\t\t// says they should be no longer than two characters.\n\t\t\t//\n\t\t\t// http://www.red-bean.com/sgf/sgf4.html#2.2\n\t\t\tif (propIdent.length > 2) {\n\t\t\t\t// TODO: What's the best way to issue a warning?\n\t\t\t\tconsole.warn(\n\t\t\t\t\t'SGF PropIdents should be no longer than two characters:', propIdent\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (Array.isArray(node[propIdent])) {\n\t\t\t\tnode[propIdent].push(propValue);\n\t\t\t} else {\n\t\t\t\tnode[propIdent] = propValue;\n\t\t\t}\n\n\t\t\treturn sgf.substring(firstPropEnd);\n\t\t},\n\n\t\t// Whitespace, tabs, or anything else we don't recognize\n\t\tunrecognized: function (sgf) {\n\n\t\t\t// March ahead to the next character\n\t\t\treturn sgf.substring(1);\n\t\t}\n\t};\n\n\t// Processes an SGF file character by character\n\tparse = function (sgf) {\n\t\twhile (sgf) {\n\t\t\tvar initial = sgf.substring(0, 1);\n\t\t\tvar type;\n\n\t\t\t// Use the initial (the first character in the remaining sgf file) to\n\t\t\t// decide which parser function to use\n\t\t\tif (initial === '(') {\n\t\t\t\ttype = 'beginSequence';\n\t\t\t} else if (initial === ')') {\n\t\t\t\ttype = 'endSequence';\n\t\t\t} else if (initial === ';') {\n\t\t\t\ttype = 'node';\n\t\t\t} else if (initial.search(/[A-Z\\[]/) !== -1) {\n\t\t\t\ttype = 'property';\n\t\t\t} else {\n\t\t\t\ttype = 'unrecognized';\n\t\t\t}\n\n\t\t\tsgf = parser[type](sgf);\n\t\t}\n\n\t\treturn collection;\n\t};\n\n\t// Begin parsing the SGF file\n\treturn parse(sgf);\n};\n\n/**\n * Generate an SGF file from a SmartGame Record JavaScript Object\n * @param {object} record A record object.\n * @return {string} The record as a string suitable for saving as an SGF file\n */\nexports.generate = function (record) {\n\t'use strict';\n\n\tfunction stringifySequences(sequences) {\n\t\tvar contents = '';\n\n\t\tsequences.forEach(function (sequence) {\n\t\t\tcontents += '(';\n\n\t\t\t// Parse all nodes in this sequence\n\t\t\tif (sequence.nodes) {\n\t\t\t\tsequence.nodes.forEach(function (node) {\n\t\t\t\t\tvar nodeString = ';';\n\t\t\t\t\tfor (var property in node) {\n\t\t\t\t\t\tif (node.hasOwnProperty(property)) {\n\t\t\t\t\t\t\tvar prop = node[property];\n\t\t\t\t\t\t\tif (Array.isArray(prop)) {\n\t\t\t\t\t\t\t\tprop = prop.join('][');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tnodeString += property + '[' + prop + ']';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcontents += nodeString;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Call the function we're in recursively for any child sequences\n\t\t\tif (sequence.sequences) {\n\t\t\t\tcontents += stringifySequences(sequence.sequences);\n\t\t\t}\n\n\t\t\tcontents += ')';\n\t\t});\n\n\t\treturn contents;\n\t}\n\n\treturn stringifySequences(record.gameTrees);\n};\n\n","/**\n * Interact with smartgame objects.\n * @param {object} smartgame A JS Object representing a smartgame\n * @see http://www.red-bean.com/sgf/sgf4.html\n * @return {object} An object with methods for navigating and manipulating a\n * smartgame\n */\nmodule.exports = function (smartgame) {\n\t'use strict';\n\n\tvar sequence;\n\tvar node;\n\n\tvar Smartgamer = function () {\n\t\tthis.init();\n\t};\n\n\tSmartgamer.prototype = {\n\t\tinit: function () {\n\t\t\tif (smartgame) {\n\t\t\t\tthis.game = smartgame.gameTrees[0];\n\t\t\t\tthis.reset();\n\t\t\t}\n\t\t},\n\n\t\t// Load a smartgame to make it possible to load new games or add one after\n\t\t// initialization, if desired\n\t\tload: function (newSmartgame) {\n\t\t\tsmartgame = newSmartgame;\n\t\t\tthis.init();\n\t\t},\n\n\t\t// Having multiple games in a collection is not common, but it's part of\n\t\t// the spec\n\t\tgames: function () {\n\t\t\treturn smartgame.gameTrees;\n\t\t},\n\n\t\tselectGame: function (i) {\n\t\t\tif (i < smartgame.gameTrees.length) {\n\t\t\t\tthis.game = smartgame.gameTrees[i];\n\t\t\t\tthis.reset();\n\t\t\t} else {\n\t\t\t\tthrow new Error('the collection doesn\\'t contain that many games');\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\n\t\treset: function () {\n\t\t\tsequence = this.game;\n\t\t\tnode = sequence.nodes[0];\n\t\t\tthis.path = { m: 0 };\n\n\t\t\treturn this;\n\t\t},\n\n\t\tgetSmartgame: function () {\n\t\t\treturn smartgame;\n\t\t},\n\n\t\t/**\n\t\t * Return any variations available at the current move\n\t\t **/\n\t\tvariations: function () {\n\t\t\tif (sequence) {\n\t\t\t\tvar localNodes = sequence.nodes;\n\t\t\t\tvar localIndex = (localNodes) ? localNodes.indexOf(node) : null;\n\n\t\t\t\tif (localNodes) {\n\t\t\t\t\tif (localIndex === (localNodes.length - 1)) {\n\t\t\t\t\t\treturn sequence.sequences || [];\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn [];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Go to the next move\n\t\t **/\n\t\tnext: function (variation) {\n\t\t\tvariation = variation || 0;\n\n\t\t\tvar localNodes = sequence.nodes;\n\t\t\tvar localIndex = (localNodes) ? localNodes.indexOf(node) : null;\n\n\t\t\t// If there are no additional nodes in this sequence,\n\t\t\t// advance to the next one\n\t\t\tif (localIndex === null || localIndex >= (localNodes.length - 1)) {\n\t\t\t\tif (sequence.sequences) {\n\t\t\t\t\tif (sequence.sequences[variation]) {\n\t\t\t\t\t\tsequence = sequence.sequences[variation];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsequence = sequence.sequences[0];\n\t\t\t\t\t}\n\n\t\t\t\t\tnode = sequence.nodes[0];\n\n\t\t\t\t\t// Note the fork chosen for this variation in the path\n\t\t\t\t\tthis.path[this.path.m] = variation;\n\t\t\t\t\tthis.path.m += 1;\n\t\t\t\t} else {\n\t\t\t\t\t// End of sequence / game\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tnode = localNodes[localIndex + 1];\n\t\t\t\tthis.path.m += 1;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\n\t\t/**\n\t\t * Go to the previous move\n\t\t **/\n\t\tprevious: function () {\n\t\t\tvar localNodes = sequence.nodes;\n\t\t\tvar localIndex = (localNodes) ? localNodes.indexOf(node) : null;\n\n\t\t\t// Delete any variation forks at this point\n\t\t\t// TODO: Make this configurable... we should keep this if we're\n\t\t\t// remembering chosen paths\n\t\t\tdelete this.path[this.path.m];\n\n\t\t\tif (!localIndex || localIndex === 0) {\n\t\t\t\tif (sequence.parent && !sequence.parent.gameTrees) {\n\t\t\t\t\tsequence = sequence.parent;\n\t\t\t\t\tif (sequence.nodes) {\n\t\t\t\t\t\tnode = sequence.nodes[sequence.nodes.length - 1];\n\t\t\t\t\t\tthis.path.m -= 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnode = null;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Already at the beginning\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tnode = localNodes[localIndex - 1];\n\t\t\t\tthis.path.m -= 1;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\n\t\t// Go to the last move of the game\n\t\tlast: function () {\n\t\t\tvar totalMoves = this.totalMoves();\n\n\t\t\twhile(this.path.m < totalMoves) {\n\t\t\t\tthis.next();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\n\t\t// Go to the first move of the game\n\t\tfirst: function () {\n\t\t\tthis.reset();\n\t\t\treturn this;\n\t\t},\n\n\t\t/**\n\t\t * Go to a particular move, specified as a\n\t\t * a) number\n\t\t * b) path string\n\t\t * c) path object\n\t\t **/\n\t\tgoTo: function (path) {\n\t\t\tif (typeof path === 'string') {\n\t\t\t\tpath = this.pathTransform(path, 'object');\n\t\t\t} else if (typeof path === 'number') {\n\t\t\t\tpath = { m: path };\n\t\t\t}\n\n\t\t\tthis.reset();\n\n\t\t\tvar n = node;\n\n\t\t\tfor (var i = 0; i < path.m && n; i += 1) {\n\t\t\t\t// Check for a variation in the path for the upcoming move\n\t\t\t\tvar variation = path[i + 1] || 0;\n\t\t\t\tn = this.next(variation);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\n\t\tgetGameInfo: function () {\n\t\t\treturn this.game.nodes[0];\n\t\t},\n\n\t\t// Provide the current node\n\t\tnode: function () {\n\t\t\treturn node;\n\t\t},\n\n\t\t// Get the total number of moves in a game\n\t\ttotalMoves: function () {\n\t\t\tvar localSequence = this.game;\n\t\t\tvar moves = 0;\n\t\t\twhile(localSequence) {\n\t\t\t\tmoves += localSequence.nodes.length;\n\n\t\t\t\tif (localSequence.sequences) {\n\t\t\t\t\tlocalSequence = localSequence.sequences[0];\n\t\t\t\t} else {\n\t\t\t\t\tlocalSequence = null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// TODO: Right now we're *assuming* that the root node doesn't have a\n\t\t\t// move in it, which is *recommended* but not required practice.\n\t\t\t// @see http://www.red-bean.com/sgf/sgf4.html\n\t\t\t// \"Note: it's bad style to have move properties in root nodes.\n\t\t\t// (it isn't forbidden though)\"\n\t\t\treturn moves - 1;\n\t\t},\n\n\t\t// Get or set a comment on the current node\n\t\t// @see http://www.red-bean.com/sgf/sgf4.html#text\n\t\tcomment: function (text) {\n\t\t\tif (typeof text === 'undefined') {\n\t\t\t\t// Unescape characters\n\t\t\t\tif (node.C) {\n\t\t\t\t\treturn node.C.replace(/\\\\([\\\\:\\]])/g, '$1');\n\t\t\t\t} else {\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Escape characters\n\t\t\t\tnode.C = text.replace(/[\\\\:\\]]/g, '\\\\$&');\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Translate alpha coordinates into an array\n\t\t * @param string alphaCoordinates\n\t\t * @return array [x, y]\n\t\t **/\n\t\ttranslateCoordinates: function (alphaCoordinates) {\n\t\t\tvar coordinateLabels = 'abcdefghijklmnopqrst';\n\t\t\tvar intersection = [];\n\n\t\t\tintersection[0] = coordinateLabels.indexOf(alphaCoordinates.substring(0, 1));\n\t\t\tintersection[1] = coordinateLabels.indexOf(alphaCoordinates.substring(1, 2));\n\n\t\t\treturn intersection;\n\t\t},\n\n\t\t/**\n\t\t * Convert path objects to strings and path strings to objects\n\t\t **/\n\t\tpathTransform: function (input, outputType, verbose) {\n\t\t\tvar output;\n\n\t\t\t// If no output type has been specified, try to set it to the\n\t\t\t// opposite of the input\n\t\t\tif (typeof outputType === 'undefined') {\n\t\t\t\toutputType = (typeof input === 'string') ? 'object' : 'string';\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Turn a path object into a string.\n\t\t\t */\n\t\t\tfunction stringify(input) {\n\t\t\t\tif (typeof input === 'string') {\n\t\t\t\t\treturn input;\n\t\t\t\t}\n\n\t\t\t\tif (!input) {\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\n\t\t\t\toutput = input.m;\n\n\t\t\t\tvar variations = [];\n\t\t\t\tfor (var key in input) {\n\t\t\t\t\tif (input.hasOwnProperty(key) && key !== 'm') {\n\t\t\t\t\t\t// Only show variations that are not the primary one, since\n\t\t\t\t\t\t// primary variations are chosen by default\n\t\t\t\t\t\tif (input[key] > 0) {\n\t\t\t\t\t\t\tif (verbose) {\n\t\t\t\t\t\t\t\tvariations.push(', variation ' + input[key] + ' at move ' + key);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tvariations.push('-' + key + ':' + input[key]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\toutput += variations.join('');\n\t\t\t\treturn output;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Turn a path string into an object.\n\t\t\t */\n\t\t\tfunction parse(input) {\n\t\t\t\tif (typeof input === 'object') {\n\t\t\t\t\tinput = stringify(input);\n\t\t\t\t}\n\n\t\t\t\tif (!input) {\n\t\t\t\t\treturn { m: 0 };\n\t\t\t\t}\n\n\t\t\t\tvar path = input.split('-');\n\t\t\t\toutput = {\n\t\t\t\t\tm: Number(path.shift())\n\t\t\t\t};\n\n\t\t\t\tif (path.length) {\n\t\t\t\t\tpath.forEach(function (variation, i) {\n\t\t\t\t\t\tvariation = variation.split(':');\n\t\t\t\t\t\toutput[Number(variation[0])] = parseInt(variation[1], 10);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn output;\n\t\t\t}\n\n\t\t\tif (outputType === 'string') {\n\t\t\t\toutput = stringify(input);\n\t\t\t} else if (outputType === 'object') {\n\t\t\t\toutput = parse(input);\n\t\t\t} else {\n\t\t\t\toutput = undefined;\n\t\t\t}\n\n\t\t\treturn output;\n\t\t}\n\t};\n\n\treturn new Smartgamer();\n};\n","﻿/* globals module: false, require: false\r\n\r\n*/\r\n/**\r\n * Provides a function for transforming SGF for a Go variant to SGF for a standard Go viewer; also provides a function for the inverse transformation.\r\n * @param {object} [options=] Defines various options for the output SGF. May be omitted, in which case the default options (see below) are used.\r\n * @param {boolean} [options.addComments = false] When flagged, comments are added to each node giving the move number and the number of stones captured by Black and White.\r\n * @param {boolean} [options.addPasses = true] When flagged, a pass is added to each node corresponding to a move by a player. This can make the output more easy to navigate in some viewers.\r\n * @param {array} [options.boardDimensions = [11, 11]] May be used for rectangular t-Go. Should be ommitted for [n, n] t-Go, where n is specified in the input SGF (@param variantSgf).\r\n * @param {number} [options.coordinatesType = 0] 0: none;\r\n * 1: (→↑;A|1-K|11): Western;\r\n * 2: (→↑;A|1-L|11): Western, no “I”;\r\n * 3: (→↓;1|1-11|11): Latin/Latin, top to bottom;\r\n * 4: (→↓;1|1-11|十一): Latin/Chinese, top to bottom;\r\n * @param {number} [options.wraparoundMarkersType = 1] 0: none;\r\n * 1: Full outline, using unicode Box Drawing symbols;\r\n * 2: corners and middles, using unicode Box Drawing symbols;\r\n * 3: just corners, using unicode Box Drawing symbols;\r\n * 4: just middles, using unicode Box Drawing symbols;\r\n * @param {object} [options.projectionSettings=] Further optional settings for how the (toroidal, or other sort of) board is projected to a flat grid.\r\n * @param {number} [options.projectionSettings.wraparound = 4]  Number of lines to add for the “wraparound”.\r\n * @param {array} [options.projectionSettings.offset = [0,0]]  Translation to apply to all moves.\r\n * @param {boolean} [options.transformToString=true] When set to false, the output is an object (an instance of a Smartgame).\r\n * @public\r\n * @return {object} An object exposing functions for going back and forth between SGF for a standard viewer, and SGF for a game of toroidal Go\r\n *//*todos:\r\noptions.markLastMove Default value: 'CR'\r\nopions.placesToCount Default: undefined. May be: 'last'|[countInfo1, .. countInfo1]. countInfo is a path plus an array with a point for each chain to be considered as dead. {path, deadChains: [...]}\r\noptions.projectionSettings.rotation {integer} Default value: 0. Allowed values: 0 .. 3\r\noptions.projectionSettings.normalizePlace array, or one of: C, TL TR BL BR (centre, top left, top right, bottom left, bottom right)\r\noptions.projectionSettings.normalize {boolean} \r\n\r\n*/\r\nfunction transformer(options\r\n) {\r\n\t'use strict';\r\n\tconst\r\n\t\t_flatten = require('lodash/flatten')\r\n\t\t, _uniqBy = require('lodash/uniqBy')\r\n\t\t, _fi = require('lodash/findIndex')\r\n\t\t, modulo = (x, y) => (x % y + y) % y\r\n\t\t, sourceSgfMessage = 'source sgf for toroidal Go has been adapted by go-variants-transformer so as to be rendered by any standard Go application'\r\n\toptions = {\r\n\t\taddPasses: true\r\n\t\t, boardDimensions: [11, 11]\r\n\t\t, transformToString: true\r\n\t\t, addComments: true\r\n\t\t, coordinatesType: 0\r\n\t\t, wraparoundMarkersType: 1\r\n\t\t//above are the defaults\r\n\t\t, ...options\r\n\t}\r\n\toptions.projectionSettings =\r\n\t\t{\r\n\t\t\twraparound: 4,\r\n\t\t\toffset: [0, 0],\r\n\t\t\t...options.projectionSettings\r\n\t\t}\r\n\r\n\tif (options.addPasses === undefined)\r\n\t\toptions.addPasses = true;\r\n\r\n\toptions.boardDimensions = options.boardDimensions || [11, 11]\r\n\r\n\tif (options.transformToString === undefined)\r\n\t\toptions.transformToString = true;\r\n\r\n\tif (options.addComments === undefined)\r\n\t\toptions.addComments = true;\r\n\t// options.projectionSettings = \r\n\r\n\tlet wraparound = options.projectionSettings.wraparound\r\n\r\n\tlet $ = {}\r\n\t\t// , _markersForWraparound = null\r\n\t\t, coordinateLabels = function (i) {\r\n\t\t\t// 97..122 and 65..90\r\n\t\t\treturn String.fromCharCode(i < 26 ? i + 97 : i + 39)\r\n\t\t\t//65 - 26 =\r\n\t\t}\r\n\t\t,\r\n\t\ttranslateCoordinate = (c) => {\r\n\t\t\tlet r = c.charCodeAt(0)\r\n\t\t\treturn r >= 97 ? r - 97 : r - 26\r\n\t\t},\r\n\t\t/**\r\n\t\t * Translate alpha coordinates into an array\r\n\t\t * @param string alphaCoordinates\r\n\t\t * @return array [x, y]\r\n\t\t **/\r\n\t\ttranslateCoordinates = (alphaCoordinates) => {\r\n\t\t\treturn [translateCoordinate(alphaCoordinates.substring(0, 1))\r\n\t\t\t\t, translateCoordinate(alphaCoordinates.substring(1, 2))]\r\n\r\n\t\t}\r\n\r\n\r\n\t$.coordinateLabels = coordinateLabels\r\n\t$.translateCoordinates = translateCoordinates\r\n\t/**\r\n\t * @public\r\n\t */\r\n\t$.options = options\r\n\r\n\t$.projectOnLine = function (a, isVertical) {\r\n\t\t/*\r\n\t\tm: boardDimensions[0] : 11\r\n\t\tn: wraparound : 4\r\n\t\tline: 0,...,(m-1)\r\n\t\t=>\r\n\t\t0,...,(n-1), (start line) n, ... , (n + m - 1) end line,  (n+m), ... , (2n + m - 1)\r\n\r\n\t\tcoordinate a ∈ {0 .. m-1} projects to n + a in main area\r\n\t\tall projections are of the form n + a + xm, x ∈ ℤ s.t. 0 ≤ n + a + xm ≤ 2n + m -1\r\n\t\t-xm ≤ n + a\r\n\t\t\tsmallest such x < 0 is ceil(-(n+a)/m)\r\n\t\t xm ≤ n + m - 1 -a\r\n\t\t\tlargest such x is floor((n + m - 1 -a) / m)\r\n\r\n\r\n\t\t*/\r\n\r\n\t\tconst m //= options.boardDimensions[0]\r\n\t\t\t= options.boardDimensions[isVertical ? 1 : 0]\r\n\r\n\t\t\t, r = []\r\n\r\n\t\tfor (let i = Math.ceil(-(wraparound + a) / m); i <= (wraparound + m - 1 - a) / m; i++)\r\n\t\t\tr.push(wraparound + a + i * m)\r\n\t\treturn r\r\n\t}\r\n\r\n\t/**\r\n\t * This is the inverse function to the function “projectOnFlat” – at least it is when “multiple” is false.\r\n\t * @param {Array} points The point or array of points projected onto the grid.\r\n\t * @param {Boolean=false} multiple Whether the argument “points” is the image of a single point (“multiple=false”) or of multiple points.\r\n\t * @returns {Array} When the flag “multiple” is flagged, returns an array of points; otherwise returns a single point (i.e. an array of two integers).\r\n\t */\r\n\tfunction inverseProjectOnFlat(points, multiple) {\r\n\t\tif (!Array.isArray(points[0])) points = [points]\r\n\t\tif (!multiple)\r\n\t\t\treturn [modulo(points[0][0] - options.projectionSettings.offset[0] - wraparound, options.boardDimensions[0])\r\n\t\t\t\t, modulo(points[0][1] - options.projectionSettings.offset[1] - wraparound, options.boardDimensions[1])]\r\n\t\treturn _uniqBy(points.map(x => inverseProjectOnFlat([x])), (x) => `${x[0]}_${x[1]}`)\r\n\t}\r\n\t$.inverseProjectOnFlat = inverseProjectOnFlat\r\n\r\n\t/**\r\n\t * Projects a point on the t-Go board to the array of points on the standard grid/board.\r\n\t * @param {Array} p The point in the t-Go board to be projected on to the grid.\r\n\t * @returns {Array}\r\n\t */\r\n\tfunction projectOnFlat(p) {\r\n\t\tconst a = $.projectOnLine(p[0] + options.projectionSettings.offset[0])\r\n\t\t\t, b = $.projectOnLine(p[1] + options.projectionSettings.offset[1])\r\n\t\t\t, r = []\r\n\t\tfor (let i = 0; i < a.length; i++)\r\n\t\t\tfor (let j = 0; j < b.length; j++)\r\n\t\t\t\tr.push([a[i], b[j]])\r\n\t\treturn r\r\n\t}\r\n\t$.projectOnFlat = projectOnFlat\r\n\r\n\t$.modX = (x) => modulo(x, options.boardDimensions[0])\r\n\t$.modY = (y) => modulo(y, options.boardDimensions[1])\r\n\r\n\tlet setUpMarkers = () => {\r\n\t\t$.wraparoundAndCoords = []\r\n\r\n\t\t// $.getMarkersForWraparound = function (){\r\n\t\tif (options.projectionSettings.wraparound > 0) {\r\n\t\t\tconst m = options.boardDimensions[0],\r\n\t\t\t\tn = options.boardDimensions[1]\r\n\r\n\t\t\t/*\r\n\t\t\tm: boardDimensions[0] : 11\r\n\t\t\tw: wraparound : 4\r\n\t\t\tline: 0,...,(m-1)\r\n\t\t\t=>\r\n\t\t\t0,...,(w-1), (start line) w, ... , (w + m - 1) end line, (w+m), ... , (2w + m - 1)\r\n\t\t\t*/\r\n\r\n\t\t\tlet board = []\r\n\t\t\tif ([1, 2, 4].indexOf(options.wraparoundMarkersType) > -1) {\r\n\t\t\t\tlet middles = options.wraparoundMarkersType > 1 ?\r\n\t\t\t\t\t[Math.floor((m - 1) / 2) + 1, Math.ceil((m - 1) / 2) + 1,\r\n\t\t\t\t\tMath.floor((n - 1) / 2) + 1, Math.ceil((n - 1) / 2) + 1]\r\n\t\t\t\t\t: [-1, 99, -1, 99]\r\n\t\t\t\tfor (let i = 1; i <= m; i++) {\r\n\t\t\t\t\tif (i < middles[0] || i > middles[1]) {\r\n\t\t\t\t\t\tcontinue\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet label = '─'//U+2500 Box Drawings Light Horizontal\r\n\r\n\t\t\t\t\tboard.push(coordinateLabels(wraparound - 1 + i) + coordinateLabels(wraparound - 1) + \":\" + label)\r\n\t\t\t\t\tboard.push(coordinateLabels(wraparound - 1 + i) + coordinateLabels(wraparound + m) + \":\" + label)\r\n\t\t\t\t}\r\n\t\t\t\tfor (let i = 1; i <= n; i++) {\r\n\t\t\t\t\tif (i < middles[2] || i > middles[3]) {\r\n\t\t\t\t\t\tcontinue\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet label = '│'//unicode too\r\n\t\t\t\t\tboard.push(coordinateLabels(wraparound - 1) + coordinateLabels(wraparound - 1 + i) + \":\" + label)\r\n\t\t\t\t\tboard.push(coordinateLabels(wraparound + n) + coordinateLabels(wraparound - 1 + i) + \":\" + label)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ([1, 2, 3].indexOf(options.wraparoundMarkersType) > -1) {\r\n\t\t\t\t//┘  ┌  └ ┐\r\n\t\t\t\tboard.push(coordinateLabels(wraparound - 1) + coordinateLabels(wraparound + n) + \":└\")\r\n\t\t\t\tboard.push(coordinateLabels(wraparound + m) + coordinateLabels(wraparound + n) + \":┘\")\r\n\t\t\t\tboard.push(coordinateLabels(wraparound - 1) + coordinateLabels(wraparound - 1) + \":┌\")\r\n\t\t\t\tboard.push(coordinateLabels(wraparound + m) + coordinateLabels(wraparound - 1) + \":┐\")\r\n\t\t\t}\r\n\r\n\t\t\tif (options.coordinatesType > 0 && wraparound > 1) {\r\n\t\t\t\tfor (let i = 1; i < 2 * wraparound + m - 1; i++) {\r\n\r\n\t\t\t\t\tlet coordIndex = $.modX(-options.projectionSettings.offset[0] - wraparound + i)\r\n\r\n\t\t\t\t\tif (options.coordinatesType === 2 && coordIndex >= 8) {\r\n\t\t\t\t\t\t//omit the I - historical coordinates for Go...\r\n\t\t\t\t\t\t//I: 9th letter\r\n\t\t\t\t\t\tcoordIndex++\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet label =\r\n\t\t\t\t\t\toptions.coordinatesType < 3\r\n\t\t\t\t\t\t\t? coordinateLabels(coordIndex).toUpperCase()\r\n\t\t\t\t\t\t\t: '' + (coordIndex + 1)\r\n\t\t\t\t\tboard.push(coordinateLabels(i) + coordinateLabels(0) + \":\" + label)\r\n\t\t\t\t\tboard.push(coordinateLabels(i) + coordinateLabels(2 * wraparound + n - 1) + \":\" + label)\r\n\t\t\t\t}\r\n\t\t\t\tlet cjkNumbers = '一二三四五六七八九'\r\n\t\t\t\tfor (let i = 1; i < 2 * wraparound + n - 1; i++) {\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t0\t\t-w\r\n\t\t\t\t\t...\r\n\t\t\t\t\tw-1\t-1\r\n\t\t\t\t\tw\t\t0\r\n\t\t\t\t\t...\r\n\t\t\t\t\tw + n -1\r\n\t\t\t\t\t\r\n\t\t\t\t\t*/\r\n\t\t\t\t\tlet coordIndex =\r\n\t\t\t\t\t\toptions.coordinatesType < 3\r\n\t\t\t\t\t\t\t? $.modY(n + options.projectionSettings.offset[1] + wraparound - i - 1)\r\n\t\t\t\t\t\t\t: $.modY(i - wraparound - options.projectionSettings.offset[1])\r\n\t\t\t\t\tlet label = ''\r\n\t\t\t\t\tswitch (options.coordinatesType) {\r\n\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\t\tlabel = '' + (coordIndex + 1)\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\t\tlabel = modulo(coordIndex, 10) === 9 ? '' : cjkNumbers[modulo(coordIndex, 10)]\r\n\r\n\t\t\t\t\t\t\tif (coordIndex > 8) {\r\n\t\t\t\t\t\t\t\tlabel = (coordIndex > 18 ? cjkNumbers[Math.floor((coordIndex + 1) / 10) - 1] : '') + '十' + label\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t}\r\n\t\t\t\t\tboard.push(coordinateLabels(0) + coordinateLabels(i) + \":\" + label)\r\n\t\t\t\t\tboard.push(coordinateLabels(2 * wraparound + m - 1) + coordinateLabels(i) + \":\" + label)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$.wraparoundAndCoords = board\r\n\t\t}\r\n\t}\r\n\tsetUpMarkers()\r\n\r\n\r\n\t$.coords2String =\r\n\t\t/**\r\n\t\t * converts coordinates to a string\r\n\t\t */\r\n\t\tfunction coords2String(coords) {\r\n\t\t\treturn coordinateLabels(coords[0]) + coordinateLabels(coords[1])\r\n\t\t}\r\n\r\n\tfunction goThroughTree(state) {\r\n\t\tlet { wrappedGame, node, pending, currentPath, tGo } = state\r\n\t\t\t, nbVariations = wrappedGame.variations().length\r\n\t\tif (currentPath.m > 1000) throw new Error('seem to be stuck!');\r\n\t\tstate.hasSiblings = nbVariations > 0\r\n\t\tif (state.hasSiblings) {\r\n\t\t\t// if(currentPath[m] === undefined)\r\n\t\t\t// currentPath[m] = 0\r\n\t\t\t// else\r\n\t\t\t// currentPath[m] += 1\r\n\t\t\t// currentPath.m += 1\r\n\t\t\tfor (let i = nbVariations - 1; i > 0; i--)\r\n\t\t\t//pile up in this order, as it's FILO and we want the last variation, which may contain a mode added by CGoboard to go last\r\n\t\t\t{\r\n\t\t\t\tlet pathForLater = { ...currentPath }//Object.assign({}, currentPath)\r\n\t\t\t\tpathForLater[currentPath.m + 1] = i\r\n\t\t\t\tpathForLater.m += 1\r\n\r\n\t\t\t\tif (tGo !== undefined)\r\n\t\t\t\t\tpending.push({ path: pathForLater, tGoData: tGo.exportData() })\r\n\t\t\t\telse\r\n\t\t\t\t\tpending.push({ path: pathForLater })\r\n\r\n\t\t\t}\r\n\t\t\tstate.node = wrappedGame.next().node()\r\n\t\t\tcurrentPath[currentPath.m + 1] = 0\r\n\t\t\tcurrentPath.m += 1\r\n\t\t\treturn state.node\r\n\t\t}\r\n\r\n\t\tlet nextNode = wrappedGame.next().node()\r\n\t\tif (node === nextNode) {//at a leaf:\r\n\t\t\tif (pending.length === 0) {\r\n\t\t\t\tstate.node = null\r\n\t\t\t\treturn state.node//finished\r\n\t\t\t}\r\n\t\t\tlet fromStack = pending.pop()\r\n\t\t\tstate.hasSiblings = true\r\n\t\t\t// if (fromStack === null) {\r\n\t\t\t// \tnode = null\r\n\t\t\t// \treturn//finished!\r\n\t\t\t// }\r\n\t\t\tif (tGo !== undefined) tGo.loadData(fromStack.tGoData)\r\n\t\t\tstate.node = wrappedGame.goTo(fromStack.path).node()\r\n\t\t\tstate.currentPath = fromStack.path\r\n\t\t\treturn state.node\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcurrentPath.m += 1\r\n\t\t\tstate.node = nextNode\r\n\t\t\treturn state.node\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Apart from a few details, this is an inverse of the transform function.\r\n\t * @param {smartgame|string} wrappedGame\r\n\t * @param {smartgame} smartgame\r\n\t * @public\r\n\t */\r\n\tfunction inverseTransform(\r\n\t\twrappedGame, smartgame) {\r\n\r\n\t\tif (smartgame === undefined) {\r\n\t\t\tsmartgame = require('smartgame')\r\n\t\t}\r\n\r\n\t\tif (typeof wrappedGame === 'string') {\r\n\t\t\tvar smartgamer = require('smartgamer')\r\n\t\t\twrappedGame = smartgamer(smartgame.parse(wrappedGame))\r\n\t\t}\r\n\r\n\t\tlet node = wrappedGame.first().node()\r\n\t\t\t, pending = []\r\n\t\t\t, currentPath = { m: 0 }\r\n\t\t\t, cleanerRegEx = /^[a-zA-Z :0-9\\-(\\r\\n]+GoVariantsTransformer\\)--[\\r\\n]*/\r\n\t\t\t, cleanComments = () => {\r\n\t\t\t\tif (node.C !== undefined) {\r\n\t\t\t\t\tnode.C = node.C.replace(cleanerRegEx, '')\r\n\t\t\t\t}\r\n\t\t\t\tif (node.C === '')\r\n\t\t\t\t\tdelete node.C\r\n\t\t\t}\r\n\t\t\t,\r\n\t\t\t/**\r\n\t\t\t * Function to:\r\n\t\t\t * \t- remove the “border” (unicode symbols added by the transform to indicate where the wraparound area meets the main grid).\r\n\t\t\t * \t- remove CM (colour map) and CT (colour table) which are nonstandard SGF added by CGoboard for background colour (could be interesting to use this feature later on).\r\n\t\t\t */\r\n\t\t\tcleanLabels = () => {\r\n\r\n\t\t\t\tlet labels = []\r\n\t\t\t\tif (node.LB !== undefined) {\r\n\t\t\t\t\tlabels = node.LB\r\n\t\t\t\t\tif (!Array.isArray(labels))\r\n\t\t\t\t\t\tlabels = [labels]\r\n\t\t\t\t\tlabels = labels.filter(i => !$.wraparoundAndCoords.includes(i))\r\n\t\t\t\t\t/* jshint loopfunc: true */\r\n\t\t\t\t\tlabels =\r\n\t\t\t\t\t\t_uniqBy(\r\n\t\t\t\t\t\t\tlabels\r\n\t\t\t\t\t\t\t\t.map(function (x) { return x.split(':', 2) })//assume the label doesn’t contain “:”\r\n\t\t\t\t\t\t\t\t.map((x) => [$.coords2String($.inverseProjectOnFlat(translateCoordinates(x[0]))), x[1]])\r\n\t\t\t\t\t\t\t, (x) => x[0])\r\n\t\t\t\t\t\t\t.map((x) => `${x[0]}:${x[1]}`)\r\n\r\n\r\n\t\t\t\t\t// labels = []\r\n\t\t\t\t\t// for (let i = 0; i < labels2.length; i++)\r\n\t\t\t\t\t// \tlabels = labels.concat(labels2)\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnode.LB = labels\r\n\t\t\t\tif (node.LB.length === 0)\r\n\t\t\t\t\tdelete node.LB\r\n\r\n\t\t\t\tif (node.CM)\r\n\t\t\t\t\tdelete node.CM\r\n\t\t\t\tif (node.CT)\r\n\t\t\t\t\tdelete node.CT\r\n\t\t\t}\r\n\r\n\t\tcleanLabels()\r\n\t\tnode.SZ = options.boardDimensions[0]\r\n\t\tnode.AP = \"go-variants-transformer\"\r\n\r\n\t\tif (node.SO !== undefined) {\r\n\t\t\tlet cleanSourceRegex = new RegExp(` \\\\(${sourceSgfMessage}\\\\)`)\r\n\t\t\tnode.SO = node.SO.replace(cleanSourceRegex, '')\r\n\t\t\t// if (node.SO === '')\r\n\t\t\t// \tdelete node.SO\r\n\t\t}\r\n\r\n\t\tlet state = {\r\n\t\t\twrappedGame, node, pending, currentPath, siblingMoves: {}//, parentsWithChildToDelete: [] \r\n\t\t}\r\n\r\n\t\tnode = goThroughTree(state)\r\n\t\twhile (node !== null) {\r\n\t\t\tcleanLabels()\r\n\t\t\tcleanComments()\r\n\r\n\t\t\tconst\r\n\t\t\t\tisBlack = node.AB !== undefined || node.B !== undefined\r\n\t\t\t\t, addedStones = isBlack ? node.AB : node.AW\r\n\t\t\t\t, playedStone = isBlack ? node.B : node.W\r\n\t\t\t\t, move = addedStones ? addedStones : playedStone\r\n\t\t\t\t, moveAsArray = Array.isArray(move) ? move : [move]\r\n\t\t\t\t, isAPass = isBlack ? node.B === '' : node.W === ''\r\n\t\t\t\t, moveHasCoords = move !== undefined && move !== ''\r\n\t\t\t\t, coords = !moveHasCoords ? undefined : $.coords2String($.inverseProjectOnFlat(moveAsArray.map(translateCoordinates)))\r\n\r\n\t\t\t//alter the node\r\n\r\n\t\t\t/*\r\n\t\t\tlogic removing a node added by CGoboard, if there already is the same move as AB or AW in a prior variation; assuming \r\n\t\t\tthe variation to be removed is the last of the siblings - which does seem to be the way CGoboard behaves when a click \r\n\t\t\tis made on a point where the next node is AB or AW.  \r\n\t\t\t*/\r\n\t\t\tif (state.hasSiblings) {\r\n\t\t\t\tlet pathForParent = { ...wrappedGame.path } //Object.assign({}, wrappedGame.path)\r\n\t\t\t\tpathForParent.m--\r\n\t\t\t\tdelete pathForParent[pathForParent.m]\r\n\t\t\t\tpathForParent = wrappedGame.pathTransform(pathForParent)\r\n\t\t\t\t// wrappedGame.previous()\r\n\t\t\t\tif (state.siblingMoves[pathForParent] === undefined) {\r\n\t\t\t\t\tstate.siblingMoves[pathForParent] = []\r\n\t\t\t\t}\r\n\t\t\t\tif (addedStones) {\r\n\t\t\t\t\tstate.siblingMoves[pathForParent].push(coords)\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\tif (playedStone && state.siblingMoves[pathForParent].indexOf(coords) > -1) {\r\n\r\n\t\t\t\t\t\t// state.parentsWithChildToDelete.push(pathForParent)\r\n\t\t\t\t\t\tnode.XX = \"inverseTransformToDelete\"\r\n\t\t\t\t\t}\r\n\t\t\t\t// wrappedGame.goTo(currentPath)\r\n\t\t\t}\r\n\r\n\t\t\tdelete node[isBlack ? 'AB' : 'AW']\r\n\t\t\tdelete node[isBlack ? 'B' : 'W']\r\n\t\t\tdelete node.CR\r\n\t\t\tdelete node.AE\r\n\r\n\t\t\tif (isAPass) {\r\n\t\t\t\tnode[isBlack ? 'B' : 'W'] = ''\r\n\t\t\t}\r\n\r\n\t\t\tif (moveHasCoords) {\r\n\t\t\t\tnode[isBlack ? 'B' : 'W'] = coords\r\n\t\t\t}\r\n\r\n\t\t\t;/*note: this next semicolon is needed! */[// eslint-disable-line no-extra-semi\r\n\t\t\t\t//'CR',todo: add if not marking the move\r\n\t\t\t\t'DD', 'MA', 'SL', 'SQ', 'TR'].forEach(function (sgfProperty) {\r\n\t\t\t\t\t// _.map(['DD','MA','SL','SQ','TR'], function(sgfProperty){\r\n\t\t\t\t\tif (node[sgfProperty] === undefined) return\r\n\t\t\t\t\tlet points = []\r\n\t\t\t\t\tif (Array.isArray(node[sgfProperty])) {\r\n\t\t\t\t\t\tpoints = node[sgfProperty]\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints = [node[sgfProperty]]\r\n\t\t\t\t\t}\r\n\t\t\t\t\tpoints =\r\n\t\t\t\t\t\t$.inverseProjectOnFlat(\r\n\t\t\t\t\t\t\tpoints.map(translateCoordinates), true\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t.map($.coords2String)\r\n\t\t\t\t\tnode[sgfProperty] = points\r\n\t\t\t\t})\r\n\t\t\t// move to next node\r\n\t\t\tnode = goThroughTree(state)\r\n\t\t}\r\n\r\n\t\t// state.parentsWithChildToDelete.forEach((path) => {\r\n\t\t// \t//remove the sgf node\r\n\t\t// \twrappedGame.goTo(path)\r\n\t\t// \tlet sequences = wrappedGame.game.sequences\r\n\t\t// \tlet index = _fi(sequences, (seq) => seq.nodes[0].inverseTransformToDelete)\r\n\t\t// \t\t, tmpI = 0\r\n\t\t// \twhile (index > -1) {\r\n\t\t// \t\tsequences.splice(index, 1)\r\n\t\t// \t\tindex = _fi(sequences, (seq) => seq.nodes[0].inverseTransformToDelete)\r\n\t\t// \t\ttmpI++\r\n\t\t// \t\tif (tmpI > 100) throw new Error('seem to be stuck!');\r\n\t\t// \t}\r\n\r\n\t\t// \t// console.log(path)\r\n\t\t// })\r\n\r\n\t\tlet deleteNodes = (sequence) => {\r\n\t\t\tif (sequence.sequences) {\r\n\r\n\t\t\t\tlet\r\n\t\t\t\t\tsequences = sequence.sequences\r\n\t\t\t\t\t, index = _fi(sequences, (seq) => seq.nodes[0].XX === 'inverseTransformToDelete')\r\n\t\t\t\t\t, tmpI = 0, max = sequences.length\r\n\t\t\t\twhile (index > -1) {\r\n\t\t\t\t\tsequences.splice(index, 1)\r\n\t\t\t\t\tindex = _fi(sequences, (seq) => seq.nodes[0].XX === 'inverseTransformToDelete')\r\n\t\t\t\t\ttmpI++\r\n\t\t\t\t\tif (tmpI > max) throw new Error('seem to be stuck!');\r\n\t\t\t\t}\r\n\t\t\t\tfor (let index2 = 0; index2 < sequences.length; index2++) {\r\n\t\t\t\t\t// deleteNodes(sequences[index2].nodes[sequences[index2].nodes.length - 1]);\r\n\t\t\t\t\tdeleteNodes(sequences[index2]);\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (sequence.nodes)\r\n\t\t\t\tdeleteNodes(sequence.nodes[sequence.nodes.length - 1])\r\n\t\t}\r\n\t\tdeleteNodes(wrappedGame.game)\r\n\r\n\t\tif (options.transformToString)\r\n\t\t\treturn smartgame.generate({ gameTrees: [wrappedGame.game] });\r\n\t\telse return wrappedGame\r\n\r\n\t}\r\n\t$.inverseTransform = inverseTransform\r\n\r\n\t/**\r\n\t * Main function; converts SGF for a Go variant (so far, just toroidal Go or t-Go).\r\n\t * @param {string} tSgf\r\n\t * @param {object} tGo Engine for counting liberties in t-Go. An instance of go-variants-engine.\r\n\t * @param {*} smartgame\r\n\t * @param {*} smartgamer\r\n\t * @returns {string|object} SGF that can be viewed in a standard SGF viewer. (See `options.transformToString` for the data type of the value returned.)\r\n\t * @public\r\n\t */\r\n\tfunction transform(\r\n\t\ttSgf //eg 11x11 sgf from LittleGolem\r\n\t\t, tGo //app implementing t-Go\r\n\t\t, smartgame\r\n\t\t, smartgamer) {\r\n\r\n\t\tif (tGo === undefined) {\r\n\t\t\t//  tGo = require('../dist/node_modules/go-variants-engine/src/engine.min.js')({\r\n\t\t\t//  tGo = require('../../engine/dist/engine.min.js')({\r\n\t\t\t\ttGo = require('go-variants-engine')({\r\n\t\t\t\t\t// tGo = require('../node_modules/go-variants-engine/src/engine')({\r\n\t\t\t\t// boardMode:'t',\r\n\t\t\t\tboardDimensions: options.boardDimensions\r\n\t\t\t})\r\n\t\t\t// tGo = require('../node_modules/go-variants-engine')({boardMode:'t', boardDimensions:options.boardDimensions})\r\n\t\t\t// tGo = require('../node_modules/go-variants-engine/src/engine')({boardMode:'t', boardDimensions:options.boardDimensions})\r\n\t\t}\r\n\t\t// else {\r\n\t\t// \ttGo.options.boardDimensions = options.boardDimensions\r\n\t\t// }\r\n\r\n\t\tif (smartgame === undefined) {\r\n\t\t\tsmartgame = require('smartgame')\r\n\t\t}\r\n\t\tif (smartgamer === undefined) {\r\n\t\t\tsmartgamer = require('smartgamer')\r\n\t\t}\r\n\t\t// console.log(tGo)\r\n\t\tlet parsed = smartgame.parse(tSgf)\r\n\t\t\t, wrappedGame = smartgamer(parsed)\r\n\t\t\t, node = wrappedGame.node()\r\n\t\t\t, passes = 0\r\n\t\t\t, pending = []\r\n\t\t\t, currentPath = { m: 0 }\r\n\t\tif (node.SZ !== undefined) {\r\n\t\t\tlet sz = Number(node.SZ)\r\n\t\t\t// sz+= 2*options.projectionSettings.wraparound\r\n\t\t\toptions.boardDimensions = [sz, sz]\r\n\t\t\ttGo.options.boardDimensions = options.boardDimensions\r\n\t\t\tsetUpMarkers()\r\n\t\t}\r\n\t\tif (node.KM !== undefined) {\r\n\t\t\toptions.rules = {komi: parseFloat(node.KM), ... options.rules }\r\n\t\t}\r\n\t\tnode.SZ = \"\" + (options.boardDimensions[0] + 2 * options.projectionSettings.wraparound)//not sure how to make a rectangular goban!\r\n\t\t//offset modulo\r\n\t\toptions.projectionSettings.offset[0] = modulo(options.projectionSettings.offset[0], options.boardDimensions[0])\r\n\t\toptions.projectionSettings.offset[1] = modulo(options.projectionSettings.offset[1], options.boardDimensions[1])\r\n\t\tlet setLabels = () => {\r\n\t\t\t//node.LB = $.wraparoundAndCoords\r\n\t\t\tlet labels = []\r\n\t\t\tif (node.LB !== undefined) {\r\n\t\t\t\tlabels = node.LB\r\n\t\t\t\tif (!Array.isArray(labels))\r\n\t\t\t\t\tlabels = [labels]\r\n\r\n\t\t\t\t/* jshint loopfunc: true */\r\n\t\t\t\tlet labels2 = labels//_.chain(labels)\r\n\t\t\t\t\t.map(function (x) { return x.split(':', 2) })//assume the label doesn’t contain “:”\r\n\t\t\t\t\t.map(function (x) { return [translateCoordinates(x[0]), x[1]] })\r\n\t\t\t\t\t.map(function (x) { return [$.projectOnFlat(x[0]), x[1]] })\r\n\t\t\t\t// .value()\r\n\t\t\t\tlabels = []\r\n\t\t\t\tfor (let i = 0; i < labels2.length; i++)\r\n\t\t\t\t\tlabels = labels.concat(\r\n\t\t\t\t\t\tlabels2[i][0].map(function (x) {\r\n\t\t\t\t\t\t\treturn $.coords2String(x) + \":\" + labels2[i][1]\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t)\r\n\t\t\t}\r\n\r\n\t\t\tnode.LB = $.wraparoundAndCoords.concat(labels)\r\n\t\t\tif (node.LB.length === 0)\r\n\t\t\t\t// delete node['LB']\r\n\t\t\t\tdelete node.LB\r\n\t\t}\r\n\r\n\t\tsetLabels()\r\n\r\n\t\tif (node.SO !== undefined)\r\n\t\t\tnode.SO = wrappedGame.game.nodes[0].SO + ` (${sourceSgfMessage})`\r\n\t\t//else node.SO = sourceSgfMessage//prefer not to add the message when original Sgf has no SO info.\r\n\r\n\t\tnode.AP = \"go-variants-transformer\"\r\n\r\n\r\n\t\tlet state = { wrappedGame, node, pending, currentPath, tGo }\r\n\r\n\t\tfunction comment(isPass, isBlack, score) {\r\n\t\t\tif (!options.addComments && !score)\r\n\t\t\t\treturn\r\n\r\n\t\t\tlet r = !options.addComments ?\r\n\t\t\t\t''\r\n\t\t\t\t: 'move ' + state.currentPath.m + '\\n' + 'White stones captured by Black: ' + tGo.board.captured[1] + '\\nBlack stones captured by White: ' + tGo.board.captured[0]\r\n\t\t\t\t//let r =  'Black captures: ' + tGo.board.captured[1] + '\\r\\nWhite captures: ' + tGo.board.captured[0]\r\n\t\t\t\t+ (!isPass ? '' : '\\n' + (isBlack ? 'Black passes' : 'White passes'))\r\n\t\t\t\t+ (!score ? '' : '\\n' + `result: ${score.displayResult}`)\r\n\r\n\t\t\tr += '\\n--(the content above was generated automatically by GoVariantsTransformer)--'\r\n\t\t\tr += (node.C === undefined ? '' : '\\n' + node.C)\r\n\t\t\tnode.C = r\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tnode = goThroughTree(state)\r\n\t\twhile (node !== null) {\r\n\r\n\r\n\t\t\tlet\r\n\t\t\t\tisBlack = node.B !== undefined\r\n\t\t\t\t, move = isBlack ? node.B : node.W\r\n\t\t\t\t, isPass = move === \"\" || (options.boardDimensions[0] === options.boardDimensions[1]\r\n\t\t\t\t\t&& options.boardDimensions[0] <= 19\r\n\t\t\t\t\t&& move === \"tt\" //weird SGF[3] way to show a pass move!\r\n\t\t\t\t)\r\n\t\t\t\t, stonesMarkedForScoring = []\r\n\r\n\t\t\tif (move === undefined && !isPass) {\r\n\t\t\t\tnode = goThroughTree(state)\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t\tsetLabels()\r\n\r\n\t\t\tif (isPass) {\r\n\t\t\t\tdelete node[isBlack ? 'B' : 'W']\r\n\t\t\t\tcomment(isPass, isBlack)\r\n\t\t\t\tnode[isBlack ? 'AB' : 'AW'] = []\r\n\t\t\t\t// if (passes === 2) {\r\n\t\t\t\t// \t//wrappedGame.game.nodes.splice(i+1)//get rid of nodes afterwards -- may not work with variations! todo\r\n\t\t\t\t// \tbreak;//stop after 3 successive passes for now\r\n\t\t\t\t// }\r\n\t\t\t\tpasses++\r\n\t\t\t\tif (passes >= 1000)\r\n\t\t\t\t\tbreak//just in case!\r\n\t\t\t\tnode = goThroughTree(state)\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tconst coords = translateCoordinates(move)\r\n\t\t\t\tlet playResult = null\r\n\t\t\t\t// run move through tGo and update game accordingly\r\n\t\t\t\ttry {\r\n\t\t\t\t\tplayResult = tGo.play(isBlack ? 'b' : 'w', coords)\r\n\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\tif (error.message !== 'point is not empty' /*ignore this - it happens with some sgf from littleGolem. Todo: look into scoring the position here. */)\r\n\t\t\t\t\t\tthrow (error)\r\n\t\t\t\t}\r\n\t\t\t\tconst projectedCoords = $.projectOnFlat(coords)\r\n\t\t\t\tlet toAdd = playResult === null ? [] : projectedCoords.map($.coords2String)\r\n\t\t\t\t\t, toRemove = playResult === null ? [] :\r\n\t\t\t\t\t\t// _.chain(playResult.removed)\r\n\t\t\t\t\t\t// \t.flatten(true)\r\n\t\t\t\t\t\t// \t.map($.projectOnFlat)\r\n\t\t\t\t\t\t// \t.flatten(true)\r\n\t\t\t\t\t\t// \t.map($.coords2String)\r\n\t\t\t\t\t\t// \t.value()\r\n\t\t\t\t\t\t_flatten(\r\n\t\t\t\t\t\t\t_flatten(playResult.removed)\r\n\t\t\t\t\t\t\t\t.map($.projectOnFlat))\r\n\t\t\t\t\t\t\t.map($.coords2String)\r\n\r\n\t\t\t\t//alter the node\r\n\t\t\t\tif (options.addPasses)\r\n\t\t\t\t\tnode[isBlack ? 'B' : 'W'] = ''\r\n\t\t\t\telse delete node[isBlack ? 'B' : 'W']\r\n\t\t\t\t// node[isBlack ? 'B' : 'W'] = ''\r\n\t\t\t\tnode[isBlack ? 'AB' : 'AW'] = toAdd\r\n\t\t\t\tif (toAdd.length > 0)\r\n\t\t\t\t\tnode.CR = toAdd\r\n\t\t\t\tif (toRemove.length > 0)\r\n\t\t\t\t\tnode.AE = toRemove\r\n\r\n\t\t\t\t\t\t/*\r\n\t\t\t\t\t\ttodo: other properties with board coordinates\r\n\t\t\t\t\t\tLeave for now:\r\n\t\t\t\t\t\tAR\r\n\t\t\t\t\t\tLN\r\n\t\t\t\t\t\t*/\r\n\r\n\t\t\t\t\t\t;/*note this semicolon is needed! */\r\n\t\t\t\t[\r\n\t\t\t\t\t//'CR',todo: add if not marking the move\r\n\t\t\t\t\t'DD', 'MA', 'SL', 'SQ', 'TR'].forEach(function (sgfProperty) {\r\n\t\t\t\t\t\t// _.map(['DD','MA','SL','SQ','TR'], function(sgfProperty){\r\n\t\t\t\t\t\tif (node[sgfProperty] === undefined) return\r\n\t\t\t\t\t\tlet points = []\r\n\t\t\t\t\t\tif (Array.isArray(node[sgfProperty])) {\r\n\t\t\t\t\t\t\tpoints = node[sgfProperty]\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tpoints = [node[sgfProperty]]\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (node.SC && sgfProperty === 'MA') {\r\n\t\t\t\t\t\t\tstonesMarkedForScoring = { ...points }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tpoints =\r\n\t\t\t\t\t\t\t// _.chain(points)\r\n\t\t\t\t\t\t\t// \t.map(translateCoordinates)\r\n\t\t\t\t\t\t\t// \t.map($.projectOnFlat)\r\n\t\t\t\t\t\t\t// \t.flatten(true)\r\n\t\t\t\t\t\t\t// \t.map($.coords2String)\r\n\t\t\t\t\t\t\t// \t.value()\r\n\t\t\t\t\t\t\t_flatten(\r\n\t\t\t\t\t\t\t\tpoints\r\n\t\t\t\t\t\t\t\t\t.map(translateCoordinates)\r\n\t\t\t\t\t\t\t\t\t.map($.projectOnFlat)\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t.map($.coords2String)\r\n\t\t\t\t\t\tnode[sgfProperty] = points\r\n\t\t\t\t\t})\r\n\t\t\t\tnode.MN = currentPath.m\r\n\r\n\t\t\t\t/*\r\n\t\t\t\tUse a custom, new SGF property, SC, in order to see if the current position should be scored, and if so, what to do with the score.\r\n\t\t\t\tIt’s a bit flag.  \r\n\t\t\t\t1\t⇒ update the comments for the node (succint). When flagged, the next option is not available.\r\n\t\t\t\t2\t⇒ update the comments for the node (verbose)\r\n\t\t\t\t4\t⇒ update the game result (RE) for the root node\r\n\t\t\t\tTypical usage: add “SC[6]” to the last node, and “SC[2]” to score a variation.\r\n\t\t\t\t*/\r\n\t\t\t\tlet updatedComment = false\r\n\t\t\t\tif (node.SC) {\r\n\t\t\t\t\tlet score = engine.score(stonesMarkedForScoring)\r\n\t\t\t\t\tif (node.SC & 1 === 1) {\r\n\t\t\t\t\t\tupdatedComment = true\r\n\t\t\t\t\t\tcomment(isPass, isBlack, score.RE)\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse /*don't want to treat succint and verbose at the same time*/ if (node.SC & 2 === 2) {\r\n\t\t\t\t\t\tupdatedComment = true\r\n\t\t\t\t\t\tcomment(isPass, isBlack,\r\n\t\t\t\t\t\t\t`Black: ${score.totalWhiteDead\r\n\t\t\t\t\t\t\t+ score.totalWhiteCaptured\r\n\t\t\t\t\t\t\t+ score.totalBlackTerritory} = ${score.totalBlackTerritory} territory + ${score.totalWhiteDead + score.totalWhiteCaptured} prisoners\r\nWhite: ${score.totalBlackDead\r\n\t\t\t\t\t\t\t+ score.totalBlackCaptured\r\n\t\t\t\t\t\t\t+ score.totalWhiteTerritory} = ${score.totalWhiteTerritory} territory + ${score.totalBlackDead + score.totalBlackCaptured} prisoners +${engine.rules.komi} komi`)\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (node.SC & 4 === 4) {\r\n\t\t\t\t\t\twrappedGame.game.nodes[0].RE = score.RE\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (!updatedComment)\r\n\t\t\t\t\tcomment(isPass, isBlack)\r\n\r\n\t\t\t\t// move to next node\r\n\t\t\t\tnode = goThroughTree(state)\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (options.transformToString)\r\n\t\t\treturn smartgame.generate({ gameTrees: [wrappedGame.game] });\r\n\t\telse return wrappedGame\r\n\t}\r\n\t$.transform = transform\r\n\treturn $\r\n\r\n}\r\nmodule.exports = transformer","/* eslint-env browser */\r\n/* global GoBoardApi */\r\n/* eslint no-console: 0 */\r\ndocument.goVariantsEditor = function (editorOptions) {\r\n\teditorOptions = { rootId: 'sgfEditor', showExtras: true, ...editorOptions }\r\n\tvar { rootId, showExtras } = editorOptions\r\n\t\t, editorTemplate = require('./editor.jsx')\r\n\t\t, go_variants_transformer = require('../src/transformer')\r\n\t// document.viewer = {}\r\n\t// var viewer = document.viewer\r\n\tvar viewer = {}\r\n\tif (viewer.ran) return\r\n\tviewer.ran = true//just run this function once\r\n\r\n\tdocument.getElementById(rootId).appendChild(editorTemplate(rootId))\r\n\r\n\tvar getElementByIdSuffix = (suffix) => document.getElementById(rootId + '_' + suffix)\r\n\r\n\r\n\tgetElementByIdSuffix('updateButton').addEventListener('click', updateVariantSgf)\r\n\r\n\t\t;[].forEach.call(document.querySelectorAll(`#${rootId}_viewerControls input[type=button]`), function (el) {\r\n\t\t\tel.addEventListener('click', function (e) {\r\n\t\t\t\tvar target = e.target || e.srcElement\r\n\t\t\t\tshowBoard({ panningDirection: target.value })\r\n\t\t\t})\r\n\t\t})\r\n\r\n\tif (showExtras) {\r\n\t\t[].forEach.call(document.querySelectorAll(`#${rootId} .go-variants-extras`), function (el) {\r\n\t\t\tel.style.display = 'inline-block'\r\n\t\t})\r\n\r\n\t\t// ;/*another semicolon that's needed...*/[].forEach.call(document.querySelectorAll(`#${rootId} fieldset.go-variants-extras`), function (el) {\r\n\t\t// \tel.style.display = 'inline-block'\r\n\t\t// })\r\n\r\n\r\n\t\tlet select = getElementByIdSuffix('sizeSelect')\r\n\t\tfor (let index = 4; index < 20; index++) {\r\n\t\t\tconst option = document.createElement('option')\r\n\t\t\toption.value = '' + index\r\n\t\t\toption.appendChild(document.createTextNode(index))\r\n\t\t\tselect.appendChild(option)\r\n\t\t}\r\n\r\n\t} else {\r\n\t\t[].forEach.call(document.querySelectorAll(`#${rootId} .go-variants-extras`), function (el) {\r\n\t\t\t//el.parentNode.removeChild(el)\r\n\t\t\tel.style.display = 'none'\r\n\t\t})\r\n\t}\r\n\r\n\tgetElementByIdSuffix('goButton').addEventListener('click', function () {\r\n\t\tshowBoard()\r\n\t})\r\n\tgetElementByIdSuffix('goLgButton').addEventListener('click', function () {\r\n\t\tgetLittleGolemSgfAndShowBoard()\r\n\t})\r\n\tgetElementByIdSuffix('newButton').addEventListener('click', function () {\r\n\t\tgetElementByIdSuffix(\"sgfIn\").value = `(;GM[1]FF[4]AP[go-variants-transformer]SZ[${getElementByIdSuffix('sizeSelect').value}])`\r\n\t\tshowBoard()\r\n\t})\r\n\r\n\tgetElementByIdSuffix('viewerControls').style.display = \"none\"\r\n\r\n\t//startup\r\n\tvar inputSgfNode = document.querySelectorAll(\r\n\t\t// `#${rootId} .go-variants-data:first-of-type`)\r\n\t\t`#${rootId} .go-variants-data`)\r\n\tif (inputSgfNode.length > 0) {\r\n\t\tgetElementByIdSuffix(\"sgfIn\").value = inputSgfNode[0].innerText\r\n\r\n\t\tshowBoard()\r\n\t}\r\n\telse {\r\n\t\tlet params = new URLSearchParams((new URL(window.location)).search.slice(1))\r\n\t\tif (params.has('sgf')) {\r\n\t\t\tlet sgf = params.get('sgf')\r\n\t\t\tif (looksLikeSgf(sgf)) {\r\n\t\t\t\tgetElementByIdSuffix(\"sgfIn\").value = sgf\r\n\t\t\t\tshowBoard()\r\n\t\t\t}\r\n\t\t} else if (params.has('littlegolemid')) {\r\n\t\t\tlet id = params.get('littlegolemid')\r\n\t\t\tif (/^\\d+$/g.test(id)) {\r\n\t\t\t\tgetElementByIdSuffix('littleGolemId').value = id\r\n\t\t\t\tgetLittleGolemSgfAndShowBoard()\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tfunction showBoard(options) {\r\n\t\tif (options === undefined) options = {}\r\n\t\tvar { tSgf, panningDirection, moveReference, reset } = options\r\n\t\tif (reset || !viewer.offset) viewer.offset = [0, 0]\r\n\t\tif (panningDirection) {\r\n\t\t\tvar right = viewer.offset[0], up = viewer.offset[1]\r\n\t\t\tswitch (panningDirection) {\r\n\r\n\t\t\t\tcase \"↑\":\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tup--\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\tcase \"↓\":\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tup++\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\t}\r\n\t\t\t\tcase \"←\":\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tright--\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\tcase \"→\":\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tright++\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tviewer.offset = [right, up]\r\n\t\t}\r\n\r\n\t\tif (tSgf === undefined || tSgf === null) {\r\n\t\t\ttSgf = getElementByIdSuffix(\"sgfIn\").value\r\n\t\t}\r\n\t\tif (tSgf === '') {\r\n\t\t\tif (!viewer.warnedEmptySgf) {\r\n\t\t\t\talert('No SGF was entered, so showing a simple sample instead.')\r\n\t\t\t\tviewer.warnedEmptySgf = true\r\n\t\t\t}\r\n\t\t\ttSgf = '(;GM[1]FF[4]CA[UTF-8]AP[go-variants-transformer]ST[0]SZ[4]KM[0]HA[0]PB[Black]PW[White]C[Here is a small sample game of Toroidal Go. It ends in a seki.];B[ad];W[bd];B[bc];W[ac];B[bb];W[aa];B[ab];W[dd];B[ca];W[cd];B[db];W[dc];B[cc];MA[ba]C[It’s a seki; neither player should play at X now - if they do, they put their own stones in atari. This is shown in the next two variations.]W[da](;B[ba];W[cb])(;B[];W[ba];B[ad]))'//forked from sample7\r\n\t\t\tgetElementByIdSuffix(\"sgfIn\").value = tSgf\r\n\t\t}\r\n\t\tvar wraparound = Number(getElementByIdSuffix('wraparoundSelect').value)\r\n\t\t\t, wraparoundMarkersType = Number(getElementByIdSuffix('wraparoundBorderSelect').value)\r\n\t\t\t, coordinatesType = Number(getElementByIdSuffix('coordinateSelect').value)\r\n\t\t\t, addComments = getElementByIdSuffix('addComments').checked\r\n\t\t\t, sgf = ''\r\n\t\ttry {\r\n\t\t\tvar transformer = go_variants_transformer({\r\n\t\t\t\taddComments,\r\n\t\t\t\twraparoundMarkersType,\r\n\t\t\t\tcoordinatesType,\r\n\t\t\t\tprojectionSettings: {\r\n\t\t\t\t\toffset: viewer.offset,\r\n\t\t\t\t\twraparound\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\tsgf = transformer.transform(tSgf)\r\n\t\t\tgetElementByIdSuffix(\"sgfOut\").value = sgf\r\n\t\t\tviewer.transformer = transformer\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\talert('an error occurred.')\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tviewer.sgf = sgf\r\n\t\tif (!panningDirection) {\r\n\r\n\t\t\tvar oGameTree = GoBoardApi.Create_GameTree()\r\n\t\t\tviewer.oGameTree = oGameTree\r\n\r\n\t\t\tGoBoardApi.Set_OnGameTreeModifiedCallback(oGameTree, () => { })\r\n\t\t\tGoBoardApi.Toggle_Rulers(oGameTree)\r\n\t\t\tGoBoardApi.Set_DrawHandicapMarks(oGameTree, false)\r\n\t\t\tGoBoardApi.Set_CapturingMode(oGameTree, false)\r\n\r\n\t\t\tGoBoardApi.Create_BoardCommentsButtonsNavigator(oGameTree, rootId + '_' + \"playerDiv\")\r\n\t\t\t// GoBoardApi.Create_EditorVer(oGameTree, \"playerDiv\");\r\n\t\t\tif (moveReference !== undefined)\r\n\t\t\t\tGoBoardApi.Load_Sgf(viewer.oGameTree, sgf, undefined, moveReference);\r\n\t\t\telse\r\n\t\t\t\tGoBoardApi.Load_Sgf(oGameTree, sgf);\r\n\r\n\t\t\tGoBoardApi.Set_OnGameTreeModifiedCallback(oGameTree, gameTreeModifiedCallback)\r\n\r\n\t\t\twindow.onresize = function () {\r\n\t\t\t\tGoBoardApi.Update_Size(oGameTree);\r\n\t\t\t};\r\n\r\n\r\n\t\t\tgetElementByIdSuffix('viewerControls').style.display = \"inline-block\"\r\n\t\t\tgetElementByIdSuffix('updateButtonDiv').style.display = \"inline-block\"\r\n\r\n\t\t\tif (showExtras) {\r\n\t\t\t\tgetElementByIdSuffix('transformedSgfFs').style.display = \"inline-block\"\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tGoBoardApi.Set_OnGameTreeModifiedCallback(viewer.oGameTree, () => { })\r\n\t\t\tmoveReference = GoBoardApi.Get_MoveReference(viewer.oGameTree, false)\r\n\t\t\tGoBoardApi.Load_Sgf(viewer.oGameTree, sgf, undefined, moveReference)\r\n\t\t\tGoBoardApi.Set_OnGameTreeModifiedCallback(viewer.oGameTree, gameTreeModifiedCallback)\r\n\t\t\tgetElementByIdSuffix('offsetTr').innerHTML = 'panned: ['\r\n\t\t\t\t+ viewer.transformer.modX(viewer.transformer.options.projectionSettings.offset[0])\r\n\t\t\t\t+ ', ' + viewer.transformer.modY(-viewer.transformer.options.projectionSettings.offset[1]) + ']'\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction gameTreeModifiedCallback() {\r\n\t\t//when a move is played, the callback is raised twice in quick succession. We want to only do work on the second call.\r\n\t\tif (!viewer.callbackLastCalled) {\r\n\t\t\tviewer.callbackLastCalled = Date.now()\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (Date.now() - viewer.callbackLastCalled < 300) {\r\n\t\t\tupdateVariantSgf()\r\n\t\t}\r\n\t\telse viewer.callbackLastCalled = Date.now()\r\n\t}\r\n\r\n\tfunction looksLikeSgf(sgf, size) {\r\n\t\tlet result = sgf.startsWith('(')\r\n\t\t// && sgf.indexOf('GM[1]') > 0 //SGF LG doesn't!\r\n\r\n\t\tif (size) {\r\n\t\t\treturn result && sgf.indexOf(`SZ[${size}]` > 3)\r\n\t\t}\r\n\t\treturn result && /SZ\\[\\d+]/.test(sgf)\r\n\t}\r\n\tfunction updateVariantSgf() {\r\n\t\tvar sgf = GoBoardApi.Save_Sgf(viewer.oGameTree)\r\n\t\tif (sgf == viewer.sgf) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tviewer.sgf = sgf\r\n\t\tvar moveReference = GoBoardApi.Get_MoveReference(viewer.oGameTree, false)\r\n\t\t// var options = viewer.transformer.options\r\n\t\t// options.boardDimensions = options.boardDimensions.map((x) => x - 2 * options.projectionSettings.wraparound) \r\n\t\tvar tSgf = viewer.transformer.inverseTransform(sgf)\r\n\t\tgetElementByIdSuffix(\"sgfIn\").value = tSgf\r\n\t\tshowBoard({ tSgf, moveReference })\r\n\t}\r\n\r\n\tfunction getLittleGolemSgfAndShowBoard() {\r\n\t\tvar gameId = getElementByIdSuffix('littleGolemId').value\r\n\t\tif (gameId === '') {\r\n\t\t\t//gameId = '1860795'\r\n\t\t\talert('enter the ID of a game from LittleGolem, e.g. “1860795”')\r\n\t\t\treturn\r\n\t\t}\r\n\t\tgameId = gameId.trim()\r\n\r\n\t\tvar proxyurl = \"https://cors-anywhere.herokuapp.com/\"\r\n\t\tvar url = `http://littlegolem.net/servlet/sgf/${gameId}/game${gameId}.sgf`\r\n\t\tif (!/^\\d+$/g.test(gameId)) {\r\n\t\t\talert('invalid ID')\r\n\t\t\treturn\r\n\t\t}\r\n\t\tgetElementByIdSuffix('goLgMsg').innerText = 'loading…'\r\n\t\tvar myHeaders = new Headers({\r\n\t\t\t\"Content-Type\": \"application/sgf\"\r\n\t\t});\r\n\t\tconst failMsg = 'load from littel Golem failed'\r\n\t\tfetch(proxyurl + url, { headers: myHeaders }).then(\r\n\t\t\tfunction (response) {\r\n\t\t\t\tif (response.status !== 200) {\r\n\t\t\t\t\tconsole.log('Looks like there was a problem. Status Code: ' + response.status);\r\n\r\n\t\t\t\t\tgetElementByIdSuffix('goLgMsg').innerText = failMsg\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Examine the text in the response\r\n\t\t\t\tresponse.text().then(function (sgf) {\r\n\t\t\t\t\tif (!looksLikeSgf(sgf, 11 /*LG is always 11x11*/)) {\r\n\t\t\t\t\t\tconsole.log('invalid SGF. Received:' + sgf)\r\n\r\n\t\t\t\t\t\tgetElementByIdSuffix('goLgMsg').innerText = failMsg\r\n\t\t\t\t\t\treturn\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsgf = sgf.replace('SZ[11]', `SZ[11]SO[http://littlegolem.net/jsp/game/game.jsp?gid=${gameId}`)\r\n\r\n\t\t\t\t\tgetElementByIdSuffix(\"sgfIn\").value = sgf\r\n\t\t\t\t\tshowBoard()\r\n\r\n\t\t\t\t\tgetElementByIdSuffix('goLgMsg').innerText = 'game loaded from Little Golem'\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t).catch(function (err) {\r\n\t\t\tconsole.log('Fetch Error :-S', err);\r\n\t\t});\r\n\t}\r\n\r\n\r\n\r\n\r\n}\r\ndocument.addEventListener('DOMContentLoaded', function () {\r\n\t[].forEach.call(document.querySelectorAll('.go-variants-editor'), function (el) {\r\n\t\tvar options = { rootId: el.id }\r\n\t\tif (el.classList.contains('go-variants-hide-extras')) {\r\n\t\t\toptions.showExtras = false\r\n\t\t}\r\n\t\tdocument.goVariantsEditor(options)\r\n\t})\r\n})","module.exports = (rootId) =>\r\n    <div>\r\n\r\n        <style type=\"text/css\">\r\n            {`#${rootId}\r\n.masonry {\r\n    -moz-column-count: 3;\r\n    -webkit-column-count: 3;\r\n    column-count: 3;\r\n    column-gap: 1em;\r\n}\r\n.item {\r\n    background-color: #fff;\r\n    display: inline-block;\r\n    margin: 0 0 1em;\r\n    \r\n    padding: 2px;\r\n    border: 1px black solid;\r\n    width: 100%;\r\n}\r\n}\r\n.go-variants-extras {\r\ndisplay: none !important;\r\n}`}\r\n        </style>\r\n        <div class=\"masonry\">\r\n            <div class=\"item go-variants-extras\">\r\n                Paste the SGF for a game of toroidal Go, (e.g. from Little Golem) in the box, and then push the button to view the game!\r\n            <br /><label for={`${rootId}_sgfIn`}>T-Go SGF:</label>\r\n                <textarea id={`${rootId}_sgfIn`} rows=\"3\"></textarea>\r\n                <input type=\"button\" id={`${rootId}_goButton`} value=\"show board (from t-Go SGF)\" />\r\n\r\n            </div>\r\n\r\n            <div class=\"item go-variants-extras\">\r\n                <label for={`${rootId}_littleGolemId`}>LittleGolem game ID:</label>\r\n                <input id={`${rootId}_littleGolemId`} type=\"text\"></input>\r\n                <input type=\"button\" id={`${rootId}_goLgButton`} value=\"show board (from littleGolem game ID)\" /><span id={`${rootId}_goLgMsg`} />\r\n            </div>\r\n\r\n            <div class=\"item go-variants-extras\">\r\n                <label for={`${rootId}_sizeSelect`}>Size:</label>\r\n                <select id={`${rootId}_sizeSelect`}>\r\n                    {/* options filled by editor.js */}\r\n                </select>\r\n                <input type=\"button\" id={`${rootId}_newButton`} value=\"New game\" />\r\n            </div>\r\n            <div style=\"display: none\" id={`${rootId}_transformedSgfFs`} class=\"item go-variants-extras\">\r\n                <label for={`${rootId}_sgfOut`}>Transformed SGF:</label>\r\n                <textarea id={`${rootId}_sgfOut`} rows=\"3\"></textarea>\r\n            </div>\r\n            <div id={`${rootId}_viewerControls`} style=\"display:none\" class=\"item\">\r\n\r\n                <table title=\"panning\" style=\"float:left\">\r\n                    <tr>\r\n                        <td colspan=\"2\" style=\"text-align: center\">\r\n                            <input type=\"button\" value=\"↑\" />\r\n                        </td>\r\n                        <td rowspan=\"4\" style=\"vertical-align: middle\">“Panning”\r\n                <p> Use the buttons to the left to “pan” the board.</p>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>\r\n                            <input type=\"button\" value=\"←\" />\r\n                        </td>\r\n                        <td>\r\n                            <input type=\"button\" value=\"→\" />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td colspan=\"2\" style=\"text-align: center\">\r\n                            <input type=\"button\" value=\"↓\" />\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td colspan=\"2\" style=\"text-align: center; font-size: small\" id={`${rootId}_offsetTr`} >\r\n                            panned: [0,0]\r\n            </td>\r\n                    </tr>\r\n                </table>\r\n            </div>\r\n            <div class=\"item\">\r\n                <label for={`${rootId}_wraparoundSelect`}>number of wraparound lines to add:</label>\r\n                <select id={`${rootId}_wraparoundSelect`}>\r\n                    <option value=\"0\">0</option>\r\n                    <option value=\"1\">1</option>\r\n                    <option value=\"2\">2</option>\r\n                    <option value=\"3\">3</option>\r\n                    <option value=\"4\" selected>4</option>\r\n                    <option value=\"5\">5</option>\r\n                    <option value=\"6\">6</option>\r\n                    <option value=\"7\">7</option>\r\n\r\n                </select>\r\n                <br />\r\n                <label for=\"addComments\">add comments:</label>\r\n                <input type=\"checkbox\" id={`${rootId}_addComments`} />\r\n                <br />\r\n                <label for={`${rootId}_wraparoundBorderSelect`}>Type of border for wraparound:</label>\r\n                <select id={`${rootId}_wraparoundBorderSelect`}>\r\n                    <option value=\"0\">No border</option>\r\n                    <option value=\"1\" selected>Full border</option>\r\n                    <option value=\"2\">Partial border (corners &amp; middles)</option>\r\n                    <option value=\"3\">Just corners</option>\r\n                    <option value=\"4\">Just middles</option>\r\n                </select>\r\n                <br />\r\n                <label for={`${rootId}_coordinateSelect`}>Type of coordinates:</label>\r\n                <select id={`${rootId}_coordinateSelect`}>\r\n                    <option value=\"0\" selected>None</option>\r\n                    <option value=\"1\">(→↑;A|1-K|11): Western</option>\r\n                    <option value=\"2\">(→↑;A|1-L|11): Western, no “I”</option>\r\n                    <option value=\"3\">(→↓;1|1-11|11): Latin/Latin, top to bottom</option>\r\n                    <option value=\"4\">(→↓;1|1-11|十一): Latin/Chinese, top to bottom</option>\r\n                </select>\r\n                <br />\r\n                <div id={`${rootId}_updateButtonDiv`} style=\"display:none\">\r\n                    <input type=\"button\" id={`${rootId}_updateButton`} value=\"update (from board)\" /> Press this button after adding marks to the board position in order to get the wraparound effect.\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n        <div id={`${rootId}_playerDiv`} style=\"position:relative; height: 75vh;width: 85vw\"></div>\r\n    </div>"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}